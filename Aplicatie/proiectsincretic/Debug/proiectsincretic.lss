
proiectsincretic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000de8  00000e7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000de8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800102  00800102  00000e7e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000eb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006d3  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000043b  00000000  00000000  000016e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b7  00000000  00000000  00001b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  000022d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c0  00000000  00000000  00002588  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000715  00000000  00000000  00002848  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00002f5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__ctors_end>
   4:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_1>
   8:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
   c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  10:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  14:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  18:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  1c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  20:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  24:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__vector_9>
  28:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  2c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__vector_11>
  30:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  34:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  38:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  3c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  40:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  44:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  48:	0c 94 3a 02 	jmp	0x474	; 0x474 <__vector_18>
  4c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  50:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  54:	0c 94 cc 01 	jmp	0x398	; 0x398 <__vector_21>
  58:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  5c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  60:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  64:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  68:	b7 00       	.word	0x00b7	; ????
  6a:	c0 00       	.word	0x00c0	; ????
  6c:	c9 00       	.word	0x00c9	; ????
  6e:	d4 00       	.word	0x00d4	; ????
  70:	df 00       	.word	0x00df	; ????
  72:	e8 00       	.word	0x00e8	; ????
  74:	f3 00       	.word	0x00f3	; ????
  76:	fc 00       	.word	0x00fc	; ????
  78:	07 01       	movw	r0, r14
  7a:	0f 01       	movw	r0, r30
  7c:	07 63       	ori	r16, 0x37	; 55
  7e:	42 36       	cpi	r20, 0x62	; 98
  80:	b7 9b       	sbis	0x16, 7	; 22
  82:	d8 a7       	std	Y+40, r29	; 0x28
  84:	1a 39       	cpi	r17, 0x9A	; 154
  86:	68 56       	subi	r22, 0x68	; 104
  88:	18 ae       	std	Y+56, r1	; 0x38
  8a:	ba ab       	std	Y+50, r27	; 0x32
  8c:	55 8c       	ldd	r5, Z+29	; 0x1d
  8e:	1d 3c       	cpi	r17, 0xCD	; 205
  90:	b7 cc       	rjmp	.-1682   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
  92:	57 63       	ori	r21, 0x37	; 55
  94:	bd 6d       	ori	r27, 0xDD	; 221
  96:	ed fd       	.word	0xfded	; ????
  98:	75 3e       	cpi	r23, 0xE5	; 229
  9a:	f6 17       	cp	r31, r22
  9c:	72 31       	cpi	r23, 0x12	; 18
  9e:	bf 00       	.word	0x00bf	; ????
  a0:	00 00       	nop
  a2:	80 3f       	cpi	r24, 0xF0	; 240
  a4:	08 00       	.word	0x0008	; ????
  a6:	00 00       	nop
  a8:	be 92       	st	-X, r11
  aa:	24 49       	sbci	r18, 0x94	; 148
  ac:	12 3e       	cpi	r17, 0xE2	; 226
  ae:	ab aa       	std	Y+51, r10	; 0x33
  b0:	aa 2a       	or	r10, r26
  b2:	be cd       	rjmp	.-1156   	; 0xfffffc30 <__eeprom_end+0xff7efc30>
  b4:	cc cc       	rjmp	.-1640   	; 0xfffffa4e <__eeprom_end+0xff7efa4e>
  b6:	4c 3e       	cpi	r20, 0xEC	; 236
  b8:	00 00       	nop
  ba:	00 80       	ld	r0, Z
  bc:	be ab       	std	Y+54, r27	; 0x36
  be:	aa aa       	std	Y+50, r10	; 0x32
  c0:	aa 3e       	cpi	r26, 0xEA	; 234
  c2:	00 00       	nop
  c4:	00 00       	nop
  c6:	bf 00       	.word	0x00bf	; ????
  c8:	00 00       	nop
  ca:	80 3f       	cpi	r24, 0xF0	; 240
  cc:	00 00       	nop
  ce:	00 00       	nop
  d0:	00 08       	sbc	r0, r0
  d2:	41 78       	andi	r20, 0x81	; 129
  d4:	d3 bb       	out	0x13, r29	; 19
  d6:	43 87       	std	Z+11, r20	; 0x0b
  d8:	d1 13       	cpse	r29, r17
  da:	3d 19       	sub	r19, r13
  dc:	0e 3c       	cpi	r16, 0xCE	; 206
  de:	c3 bd       	out	0x23, r28	; 35
  e0:	42 82       	std	Z+2, r4	; 0x02
  e2:	ad 2b       	or	r26, r29
  e4:	3e 68       	ori	r19, 0x8E	; 142
  e6:	ec 82       	std	Y+4, r14	; 0x04
  e8:	76 be       	out	0x36, r7	; 54
  ea:	d9 8f       	std	Y+25, r29	; 0x19
  ec:	e1 a9       	ldd	r30, Z+49	; 0x31
  ee:	3e 4c       	sbci	r19, 0xCE	; 206
  f0:	80 ef       	ldi	r24, 0xF0	; 240
  f2:	ff be       	out	0x3f, r15	; 63
  f4:	01 c4       	rjmp	.+2050   	; 0x8f8 <__mulsf3_pse+0x4a>
  f6:	ff 7f       	andi	r31, 0xFF	; 255
  f8:	3f 00       	.word	0x003f	; ????
  fa:	00 00       	nop
	...

000000fe <__ctors_end>:
  fe:	11 24       	eor	r1, r1
 100:	1f be       	out	0x3f, r1	; 63
 102:	cf ef       	ldi	r28, 0xFF	; 255
 104:	d8 e0       	ldi	r29, 0x08	; 8
 106:	de bf       	out	0x3e, r29	; 62
 108:	cd bf       	out	0x3d, r28	; 61

0000010a <__do_copy_data>:
 10a:	11 e0       	ldi	r17, 0x01	; 1
 10c:	a0 e0       	ldi	r26, 0x00	; 0
 10e:	b1 e0       	ldi	r27, 0x01	; 1
 110:	e8 ee       	ldi	r30, 0xE8	; 232
 112:	fd e0       	ldi	r31, 0x0D	; 13
 114:	02 c0       	rjmp	.+4      	; 0x11a <__do_copy_data+0x10>
 116:	05 90       	lpm	r0, Z+
 118:	0d 92       	st	X+, r0
 11a:	a2 30       	cpi	r26, 0x02	; 2
 11c:	b1 07       	cpc	r27, r17
 11e:	d9 f7       	brne	.-10     	; 0x116 <__do_copy_data+0xc>

00000120 <__do_clear_bss>:
 120:	21 e0       	ldi	r18, 0x01	; 1
 122:	a2 e0       	ldi	r26, 0x02	; 2
 124:	b1 e0       	ldi	r27, 0x01	; 1
 126:	01 c0       	rjmp	.+2      	; 0x12a <.do_clear_bss_start>

00000128 <.do_clear_bss_loop>:
 128:	1d 92       	st	X+, r1

0000012a <.do_clear_bss_start>:
 12a:	a6 30       	cpi	r26, 0x06	; 6
 12c:	b2 07       	cpc	r27, r18
 12e:	e1 f7       	brne	.-8      	; 0x128 <.do_clear_bss_loop>
 130:	0e 94 4f 02 	call	0x49e	; 0x49e <main>
 134:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <_exit>

00000138 <__bad_interrupt>:
 138:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000013c <display_init>:
int push=-1;

void display_init()
{
	//setting 7-digit display leds as output
	DDRB |= (1<<PINB0)|(1<<PINB1)|(1<<PINB2)|(1<<PINB3);
 13c:	84 b1       	in	r24, 0x04	; 4
 13e:	8f 60       	ori	r24, 0x0F	; 15
 140:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1<<PINC1)|(1<<PINC2)|(1<<PINC3)|(1<<PINC4);
 142:	87 b1       	in	r24, 0x07	; 7
 144:	8e 61       	ori	r24, 0x1E	; 30
 146:	87 b9       	out	0x07, r24	; 7
 148:	08 95       	ret

0000014a <pushbutton_init>:
}

void pushbutton_init()
{
	//setting pushbutton pin as input
	DDRD&=~(1<<PIND2);
 14a:	52 98       	cbi	0x0a, 2	; 10
	// turn On the Pull-up
	PORTD |= (1 << PORTD2);
 14c:	5a 9a       	sbi	0x0b, 2	; 11
	//interrupt on rising edge
	EICRA|=(1<<ISC01)|(1<<ISC00);
 14e:	e9 e6       	ldi	r30, 0x69	; 105
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	83 60       	ori	r24, 0x03	; 3
 156:	80 83       	st	Z, r24
	//enabling external INT0 
	EIMSK|=(1<<INT0);
 158:	e8 9a       	sbi	0x1d, 0	; 29
 15a:	08 95       	ret

0000015c <display_digit>:
	//PCMSK2|=(1<<PCINT18);
}

void display_digit(int digit)
{
	switch(digit)
 15c:	8a 30       	cpi	r24, 0x0A	; 10
 15e:	91 05       	cpc	r25, r1
 160:	08 f0       	brcs	.+2      	; 0x164 <display_digit+0x8>
 162:	67 c0       	rjmp	.+206    	; 0x232 <display_digit+0xd6>
 164:	fc 01       	movw	r30, r24
 166:	ec 5c       	subi	r30, 0xCC	; 204
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <__tablejump2__>
	{
		case 0: PORTB&=~(1<<PINB0);
 16e:	28 98       	cbi	0x05, 0	; 5
				PORTC&=~(1<<PINC1);
 170:	41 98       	cbi	0x08, 1	; 8
				PORTB|=(1<<PINB1)|(1<<PINB2)|(1<<PINB3);
 172:	85 b1       	in	r24, 0x05	; 5
 174:	8e 60       	ori	r24, 0x0E	; 14
 176:	85 b9       	out	0x05, r24	; 5
				PORTC|=(1<<PINC2)|(1<<PINC3)|(1<<PINC4);
 178:	88 b1       	in	r24, 0x08	; 8
 17a:	8c 61       	ori	r24, 0x1C	; 28
 17c:	88 b9       	out	0x08, r24	; 8
				break;
 17e:	08 95       	ret
		case 1: PORTB&=~(1<<PINB0)&~(1<<PINB1)&~(1<<PINB2);
 180:	85 b1       	in	r24, 0x05	; 5
 182:	88 7f       	andi	r24, 0xF8	; 248
 184:	85 b9       	out	0x05, r24	; 5
				PORTC&=~(1<<PINC1)&~(1<<PINC3)&~(1<<PINC4);
 186:	88 b1       	in	r24, 0x08	; 8
 188:	85 7e       	andi	r24, 0xE5	; 229
 18a:	88 b9       	out	0x08, r24	; 8
				PORTB|=1<<PINB3;
 18c:	2b 9a       	sbi	0x05, 3	; 5
				PORTC|=1<<PINC2;
 18e:	42 9a       	sbi	0x08, 2	; 8
				break;
 190:	08 95       	ret
		case 2: PORTB&=~(1<<PINB1);
 192:	29 98       	cbi	0x05, 1	; 5
				PORTC&=~(1<<PINC1)&~(1<<PINC2);
 194:	88 b1       	in	r24, 0x08	; 8
 196:	89 7f       	andi	r24, 0xF9	; 249
 198:	88 b9       	out	0x08, r24	; 8
				PORTB|=(1<<PINB0)|(1<<PINB2)|(1<<PINB3);
 19a:	85 b1       	in	r24, 0x05	; 5
 19c:	8d 60       	ori	r24, 0x0D	; 13
 19e:	85 b9       	out	0x05, r24	; 5
				PORTC|=(1<<PINC3)|(1<<PINC4);
 1a0:	88 b1       	in	r24, 0x08	; 8
 1a2:	88 61       	ori	r24, 0x18	; 24
 1a4:	88 b9       	out	0x08, r24	; 8
				break;
 1a6:	08 95       	ret
		case 3: PORTB&=~(1<<PINB1);
 1a8:	29 98       	cbi	0x05, 1	; 5
				PORTC&=~(1<<PINC1)&~(1<<PINC4);
 1aa:	88 b1       	in	r24, 0x08	; 8
 1ac:	8d 7e       	andi	r24, 0xED	; 237
 1ae:	88 b9       	out	0x08, r24	; 8
				PORTB|=(1<<PINB0)|(1<<PINB2)|(1<<PINB3);
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	8d 60       	ori	r24, 0x0D	; 13
 1b4:	85 b9       	out	0x05, r24	; 5
				PORTC|=(1<<PINC2)|(1<<PINC3);
 1b6:	88 b1       	in	r24, 0x08	; 8
 1b8:	8c 60       	ori	r24, 0x0C	; 12
 1ba:	88 b9       	out	0x08, r24	; 8
				break;	
 1bc:	08 95       	ret
		case 4: PORTB&=~(1<<PINB2);
 1be:	2a 98       	cbi	0x05, 2	; 5
				PORTC&=~(1<<PINC1)&~(1<<PINC3)&~(1<<PINC4);
 1c0:	88 b1       	in	r24, 0x08	; 8
 1c2:	85 7e       	andi	r24, 0xE5	; 229
 1c4:	88 b9       	out	0x08, r24	; 8
				PORTB|=(1<<PINB0)|(1<<PINB1)|(1<<PINB3);
 1c6:	85 b1       	in	r24, 0x05	; 5
 1c8:	8b 60       	ori	r24, 0x0B	; 11
 1ca:	85 b9       	out	0x05, r24	; 5
				PORTC|=(1<<PINC2);
 1cc:	42 9a       	sbi	0x08, 2	; 8
				break;	
 1ce:	08 95       	ret
		case 5: PORTB&=~(1<<PINB3);
 1d0:	2b 98       	cbi	0x05, 3	; 5
				PORTC&=~(1<<PINC1)&~(1<<PINC4);
 1d2:	88 b1       	in	r24, 0x08	; 8
 1d4:	8d 7e       	andi	r24, 0xED	; 237
 1d6:	88 b9       	out	0x08, r24	; 8
				PORTB|=(1<<PINB0)|(1<<PINB1)|(1<<PINB2);
 1d8:	85 b1       	in	r24, 0x05	; 5
 1da:	87 60       	ori	r24, 0x07	; 7
 1dc:	85 b9       	out	0x05, r24	; 5
				PORTC|=(1<<PINC2)|(1<<PINC3);
 1de:	88 b1       	in	r24, 0x08	; 8
 1e0:	8c 60       	ori	r24, 0x0C	; 12
 1e2:	88 b9       	out	0x08, r24	; 8
				break;
 1e4:	08 95       	ret
		case 6: PORTB&=~(1<<PINB3);
 1e6:	2b 98       	cbi	0x05, 3	; 5
				PORTC&=~(1<<PINC1);
 1e8:	41 98       	cbi	0x08, 1	; 8
				PORTB|=(1<<PINB0)|(1<<PINB1)|(1<<PINB2);
 1ea:	85 b1       	in	r24, 0x05	; 5
 1ec:	87 60       	ori	r24, 0x07	; 7
 1ee:	85 b9       	out	0x05, r24	; 5
				PORTC|=(1<<PINC2)|(1<<PINC3)|(1<<PINC4);
 1f0:	88 b1       	in	r24, 0x08	; 8
 1f2:	8c 61       	ori	r24, 0x1C	; 28
 1f4:	88 b9       	out	0x08, r24	; 8
				break;
 1f6:	08 95       	ret
		case 7: PORTB&=~(1<<PINB0)&~(1<<PINB1);
 1f8:	85 b1       	in	r24, 0x05	; 5
 1fa:	8c 7f       	andi	r24, 0xFC	; 252
 1fc:	85 b9       	out	0x05, r24	; 5
				PORTC&=~(1<<PINC1)&~(1<<PINC3)&~(1<<PINC4);
 1fe:	88 b1       	in	r24, 0x08	; 8
 200:	85 7e       	andi	r24, 0xE5	; 229
 202:	88 b9       	out	0x08, r24	; 8
				PORTB|=(1<<PINB2)|(1<<PINB3);
 204:	85 b1       	in	r24, 0x05	; 5
 206:	8c 60       	ori	r24, 0x0C	; 12
 208:	85 b9       	out	0x05, r24	; 5
				PORTC|=(1<<PINC2);
 20a:	42 9a       	sbi	0x08, 2	; 8
				break;
 20c:	08 95       	ret
		case 8: PORTC&=~(1<<PINC1);
 20e:	41 98       	cbi	0x08, 1	; 8
				PORTB|=(1<<PINB0)|(1<<PINB1)|(1<<PINB2)|(1<<PINB3);
 210:	85 b1       	in	r24, 0x05	; 5
 212:	8f 60       	ori	r24, 0x0F	; 15
 214:	85 b9       	out	0x05, r24	; 5
				PORTC|=(1<<PINC2)|(1<<PINC3)|(1<<PINC4);
 216:	88 b1       	in	r24, 0x08	; 8
 218:	8c 61       	ori	r24, 0x1C	; 28
 21a:	88 b9       	out	0x08, r24	; 8
				break;
 21c:	08 95       	ret
		case 9: PORTC&=~(1<<PINC1)&~(1<<PINC4);
 21e:	88 b1       	in	r24, 0x08	; 8
 220:	8d 7e       	andi	r24, 0xED	; 237
 222:	88 b9       	out	0x08, r24	; 8
				PORTB|=(1<<PINB0)|(1<<PINB1)|(1<<PINB2)|(1<<PINB3);
 224:	85 b1       	in	r24, 0x05	; 5
 226:	8f 60       	ori	r24, 0x0F	; 15
 228:	85 b9       	out	0x05, r24	; 5
				PORTC|=(1<<PINC2)|(1<<PINC3);
 22a:	88 b1       	in	r24, 0x08	; 8
 22c:	8c 60       	ori	r24, 0x0C	; 12
 22e:	88 b9       	out	0x08, r24	; 8
				break;
 230:	08 95       	ret
		default:PORTC&=~(1<<PINC2);
 232:	42 98       	cbi	0x08, 2	; 8
				PORTB&=~(1<<PINB3);
 234:	2b 98       	cbi	0x05, 3	; 5
				PORTB|=(1<<PINB0)|(1<<PINB1)|(1<<PINB2);
 236:	85 b1       	in	r24, 0x05	; 5
 238:	87 60       	ori	r24, 0x07	; 7
 23a:	85 b9       	out	0x05, r24	; 5
				PORTC|=(1<<PINC1)|(1<<PINC3)|(1<<PINC4);
 23c:	88 b1       	in	r24, 0x08	; 8
 23e:	8a 61       	ori	r24, 0x1A	; 26
 240:	88 b9       	out	0x08, r24	; 8
 242:	08 95       	ret

00000244 <__vector_1>:
	
	
}

ISR (INT0_vect)
{
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	11 24       	eor	r1, r1
 24e:	2f 93       	push	r18
 250:	3f 93       	push	r19
 252:	4f 93       	push	r20
 254:	5f 93       	push	r21
 256:	6f 93       	push	r22
 258:	7f 93       	push	r23
 25a:	8f 93       	push	r24
 25c:	9f 93       	push	r25
 25e:	af 93       	push	r26
 260:	bf 93       	push	r27
 262:	ef 93       	push	r30
 264:	ff 93       	push	r31
	push++;
 266:	80 91 00 01 	lds	r24, 0x0100
 26a:	90 91 01 01 	lds	r25, 0x0101
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	90 93 01 01 	sts	0x0101, r25
 274:	80 93 00 01 	sts	0x0100, r24
	display_digit(push);
 278:	0e 94 ae 00 	call	0x15c	; 0x15c <display_digit>
	
	if(push>=9)
 27c:	80 91 00 01 	lds	r24, 0x0100
 280:	90 91 01 01 	lds	r25, 0x0101
 284:	09 97       	sbiw	r24, 0x09	; 9
 286:	34 f0       	brlt	.+12     	; 0x294 <__vector_1+0x50>
		push=-1;
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	9f ef       	ldi	r25, 0xFF	; 255
 28c:	90 93 01 01 	sts	0x0101, r25
 290:	80 93 00 01 	sts	0x0100, r24
 294:	ff 91       	pop	r31
 296:	ef 91       	pop	r30
 298:	bf 91       	pop	r27
 29a:	af 91       	pop	r26
 29c:	9f 91       	pop	r25
 29e:	8f 91       	pop	r24
 2a0:	7f 91       	pop	r23
 2a2:	6f 91       	pop	r22
 2a4:	5f 91       	pop	r21
 2a6:	4f 91       	pop	r20
 2a8:	3f 91       	pop	r19
 2aa:	2f 91       	pop	r18
 2ac:	0f 90       	pop	r0
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	0f 90       	pop	r0
 2b2:	1f 90       	pop	r1
 2b4:	18 95       	reti

000002b6 <adc_init>:
float medie=0;

void adc_init()
{
	//setting Port A as input
	DDRC = 0x00;
 2b6:	17 b8       	out	0x07, r1	; 7
	//adc enable, interrupt enable, prescaler of 128
	ADCSRA|=(1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 2b8:	ea e7       	ldi	r30, 0x7A	; 122
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	8f 68       	ori	r24, 0x8F	; 143
 2c0:	80 83       	st	Z, r24
	// AVcc voltage reference
	ADMUX|=(1<<REFS0);	
 2c2:	ac e7       	ldi	r26, 0x7C	; 124
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
 2c6:	8c 91       	ld	r24, X
 2c8:	80 64       	ori	r24, 0x40	; 64
 2ca:	8c 93       	st	X, r24
	//setting pinb5 as output for the temperature led
	DDRB|=(1<<PINB5);
 2cc:	25 9a       	sbi	0x04, 5	; 4
	//start first conversion
	ADCSRA |= 1<<ADSC;
 2ce:	80 81       	ld	r24, Z
 2d0:	80 64       	ori	r24, 0x40	; 64
 2d2:	80 83       	st	Z, r24
 2d4:	08 95       	ret

000002d6 <sending_temperature>:
}

void sending_temperature(float temperature)
{
 2d6:	ef 92       	push	r14
 2d8:	ff 92       	push	r15
 2da:	0f 93       	push	r16
 2dc:	1f 93       	push	r17
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
	int temp = (int)(temperature*10);
 2e2:	20 e0       	ldi	r18, 0x00	; 0
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	40 e2       	ldi	r20, 0x20	; 32
 2e8:	51 e4       	ldi	r21, 0x41	; 65
 2ea:	0e 94 41 04 	call	0x882	; 0x882 <__mulsf3>
 2ee:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fixsfsi>
 2f2:	ab 01       	movw	r20, r22
 2f4:	bc 01       	movw	r22, r24
 2f6:	8a 01       	movw	r16, r20
	int c,cifra=1;
	
	while(temp/10)
 2f8:	ca 01       	movw	r24, r20
 2fa:	09 96       	adiw	r24, 0x09	; 9
 2fc:	43 97       	sbiw	r24, 0x13	; 19
 2fe:	a0 f0       	brcs	.+40     	; 0x328 <sending_temperature+0x52>
 300:	84 2f       	mov	r24, r20
 302:	95 2f       	mov	r25, r21
 304:	c1 e0       	ldi	r28, 0x01	; 1
 306:	d0 e0       	ldi	r29, 0x00	; 0
		{
			cifra++;
			temp=temp/10;
 308:	2a e0       	ldi	r18, 0x0A	; 10
 30a:	30 e0       	ldi	r19, 0x00	; 0
	int temp = (int)(temperature*10);
	int c,cifra=1;
	
	while(temp/10)
		{
			cifra++;
 30c:	21 96       	adiw	r28, 0x01	; 1
			temp=temp/10;
 30e:	b9 01       	movw	r22, r18
 310:	0e 94 c4 06 	call	0xd88	; 0xd88 <__divmodhi4>
 314:	86 2f       	mov	r24, r22
 316:	97 2f       	mov	r25, r23
void sending_temperature(float temperature)
{
	int temp = (int)(temperature*10);
	int c,cifra=1;
	
	while(temp/10)
 318:	67 5f       	subi	r22, 0xF7	; 247
 31a:	7f 4f       	sbci	r23, 0xFF	; 255
 31c:	63 31       	cpi	r22, 0x13	; 19
 31e:	71 05       	cpc	r23, r1
 320:	a8 f7       	brcc	.-22     	; 0x30c <sending_temperature+0x36>
		{
			cifra++;
			temp=temp/10;
		}

	while(cifra)
 322:	20 97       	sbiw	r28, 0x00	; 0
 324:	19 f4       	brne	.+6      	; 0x32c <sending_temperature+0x56>
 326:	2e c0       	rjmp	.+92     	; 0x384 <sending_temperature+0xae>
}

void sending_temperature(float temperature)
{
	int temp = (int)(temperature*10);
	int c,cifra=1;
 328:	c1 e0       	ldi	r28, 0x01	; 1
 32a:	d0 e0       	ldi	r29, 0x00	; 0
			temp=temp/10;
		}

	while(cifra)
	{
		c=((int)(temperature*10)/(int)pow(10,cifra-1))%10;
 32c:	0f 2e       	mov	r0, r31
 32e:	fa e0       	ldi	r31, 0x0A	; 10
 330:	ef 2e       	mov	r14, r31
 332:	f1 2c       	mov	r15, r1
 334:	f0 2d       	mov	r31, r0
 336:	21 97       	sbiw	r28, 0x01	; 1
 338:	be 01       	movw	r22, r28
 33a:	0d 2e       	mov	r0, r29
 33c:	00 0c       	add	r0, r0
 33e:	88 0b       	sbc	r24, r24
 340:	99 0b       	sbc	r25, r25
 342:	0e 94 b0 03 	call	0x760	; 0x760 <__floatsisf>
 346:	9b 01       	movw	r18, r22
 348:	ac 01       	movw	r20, r24
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	80 e2       	ldi	r24, 0x20	; 32
 350:	91 e4       	ldi	r25, 0x41	; 65
 352:	0e 94 ae 04 	call	0x95c	; 0x95c <pow>
 356:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__fixsfsi>
 35a:	ab 01       	movw	r20, r22
 35c:	bc 01       	movw	r22, r24
 35e:	c8 01       	movw	r24, r16
 360:	ba 01       	movw	r22, r20
 362:	0e 94 c4 06 	call	0xd88	; 0xd88 <__divmodhi4>
 366:	cb 01       	movw	r24, r22
 368:	b7 01       	movw	r22, r14
 36a:	0e 94 c4 06 	call	0xd88	; 0xd88 <__divmodhi4>
		USART_Transmit(48+c);
 36e:	80 5d       	subi	r24, 0xD0	; 208
 370:	0e 94 32 02 	call	0x464	; 0x464 <USART_Transmit>
		if(cifra==2)
 374:	c1 30       	cpi	r28, 0x01	; 1
 376:	d1 05       	cpc	r29, r1
 378:	19 f4       	brne	.+6      	; 0x380 <sending_temperature+0xaa>
			USART_Transmit('.');
 37a:	8e e2       	ldi	r24, 0x2E	; 46
 37c:	0e 94 32 02 	call	0x464	; 0x464 <USART_Transmit>
		{
			cifra++;
			temp=temp/10;
		}

	while(cifra)
 380:	20 97       	sbiw	r28, 0x00	; 0
 382:	c9 f6       	brne	.-78     	; 0x336 <sending_temperature+0x60>
		USART_Transmit(48+c);
		if(cifra==2)
			USART_Transmit('.');
		cifra--;
	}
	USART_Transmit('\n');
 384:	8a e0       	ldi	r24, 0x0A	; 10
 386:	0e 94 32 02 	call	0x464	; 0x464 <USART_Transmit>
}
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	1f 91       	pop	r17
 390:	0f 91       	pop	r16
 392:	ff 90       	pop	r15
 394:	ef 90       	pop	r14
 396:	08 95       	ret

00000398 <__vector_21>:

/*ADC Conversion Complete Interrupt Service Routine (ISR)*/
ISR(ADC_vect)
{
 398:	1f 92       	push	r1
 39a:	0f 92       	push	r0
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	0f 92       	push	r0
 3a0:	11 24       	eor	r1, r1
 3a2:	cf 92       	push	r12
 3a4:	df 92       	push	r13
 3a6:	ef 92       	push	r14
 3a8:	ff 92       	push	r15
 3aa:	2f 93       	push	r18
 3ac:	3f 93       	push	r19
 3ae:	4f 93       	push	r20
 3b0:	5f 93       	push	r21
 3b2:	6f 93       	push	r22
 3b4:	7f 93       	push	r23
 3b6:	8f 93       	push	r24
 3b8:	9f 93       	push	r25
 3ba:	af 93       	push	r26
 3bc:	bf 93       	push	r27
 3be:	ef 93       	push	r30
 3c0:	ff 93       	push	r31
	uint16_t val = ADC;
 3c2:	60 91 78 00 	lds	r22, 0x0078
 3c6:	70 91 79 00 	lds	r23, 0x0079
	float mv = (val/1024.0)*5000;
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 ae 03 	call	0x75c	; 0x75c <__floatunsisf>
 3d2:	20 e0       	ldi	r18, 0x00	; 0
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	40 e8       	ldi	r20, 0x80	; 128
 3d8:	5a e3       	ldi	r21, 0x3A	; 58
 3da:	0e 94 41 04 	call	0x882	; 0x882 <__mulsf3>
 3de:	20 e0       	ldi	r18, 0x00	; 0
 3e0:	30 e4       	ldi	r19, 0x40	; 64
 3e2:	4c e9       	ldi	r20, 0x9C	; 156
 3e4:	55 e4       	ldi	r21, 0x45	; 69
 3e6:	0e 94 41 04 	call	0x882	; 0x882 <__mulsf3>
	float cel = mv/10;
 3ea:	20 e0       	ldi	r18, 0x00	; 0
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	40 e2       	ldi	r20, 0x20	; 32
 3f0:	51 e4       	ldi	r21, 0x41	; 65
 3f2:	0e 94 06 03 	call	0x60c	; 0x60c <__divsf3>
 3f6:	6b 01       	movw	r12, r22
 3f8:	7c 01       	movw	r14, r24
	
	sending_temperature(cel);
 3fa:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <sending_temperature>
	if(cel>=34.5)
 3fe:	20 e0       	ldi	r18, 0x00	; 0
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	4a e0       	ldi	r20, 0x0A	; 10
 404:	52 e4       	ldi	r21, 0x42	; 66
 406:	c7 01       	movw	r24, r14
 408:	b6 01       	movw	r22, r12
 40a:	0e 94 3c 04 	call	0x878	; 0x878 <__gesf2>
 40e:	88 23       	and	r24, r24
 410:	14 f0       	brlt	.+4      	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
		PORTB|=(1<<PINB5);
 412:	2d 9a       	sbi	0x05, 5	; 5
 414:	01 c0       	rjmp	.+2      	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
	else
		PORTB&=~(1<<PINB5);
 416:	2d 98       	cbi	0x05, 5	; 5
	
	ADCSRA |= 1<<ADSC;		// Start Conversion
 418:	ea e7       	ldi	r30, 0x7A	; 122
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	80 81       	ld	r24, Z
 41e:	80 64       	ori	r24, 0x40	; 64
 420:	80 83       	st	Z, r24
 422:	ff 91       	pop	r31
 424:	ef 91       	pop	r30
 426:	bf 91       	pop	r27
 428:	af 91       	pop	r26
 42a:	9f 91       	pop	r25
 42c:	8f 91       	pop	r24
 42e:	7f 91       	pop	r23
 430:	6f 91       	pop	r22
 432:	5f 91       	pop	r21
 434:	4f 91       	pop	r20
 436:	3f 91       	pop	r19
 438:	2f 91       	pop	r18
 43a:	ff 90       	pop	r15
 43c:	ef 90       	pop	r14
 43e:	df 90       	pop	r13
 440:	cf 90       	pop	r12
 442:	0f 90       	pop	r0
 444:	0f be       	out	0x3f, r0	; 63
 446:	0f 90       	pop	r0
 448:	1f 90       	pop	r1
 44a:	18 95       	reti

0000044c <USART_Init>:
		else
		{
			USART_Transmit(str[i]);
		}
	}
}
 44c:	90 93 c5 00 	sts	0x00C5, r25
 450:	80 93 c4 00 	sts	0x00C4, r24
 454:	88 e9       	ldi	r24, 0x98	; 152
 456:	80 93 c1 00 	sts	0x00C1, r24
 45a:	8e e0       	ldi	r24, 0x0E	; 14
 45c:	80 93 c2 00 	sts	0x00C2, r24
 460:	24 9a       	sbi	0x04, 4	; 4
 462:	08 95       	ret

00000464 <USART_Transmit>:
 464:	e0 ec       	ldi	r30, 0xC0	; 192
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	90 81       	ld	r25, Z
 46a:	95 ff       	sbrs	r25, 5
 46c:	fd cf       	rjmp	.-6      	; 0x468 <USART_Transmit+0x4>
 46e:	80 93 c6 00 	sts	0x00C6, r24
 472:	08 95       	ret

00000474 <__vector_18>:

ISR (USART_RX_vect)
{
 474:	1f 92       	push	r1
 476:	0f 92       	push	r0
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	0f 92       	push	r0
 47c:	11 24       	eor	r1, r1
 47e:	8f 93       	push	r24
	//unsigned char receivedByte;
	//receivedByte = UDR0; // Fetch the received byte value into the variable "ByteReceived"
	//UDR0 = receivedByte; // Echo back the received byte back to the computer
unsigned char ch = UDR0;
 480:	80 91 c6 00 	lds	r24, 0x00C6
	if(ch=='a')
 484:	81 36       	cpi	r24, 0x61	; 97
 486:	11 f4       	brne	.+4      	; 0x48c <__vector_18+0x18>
		{
			PORTB|= 1<<PINB4;
 488:	2c 9a       	sbi	0x05, 4	; 5
 48a:	03 c0       	rjmp	.+6      	; 0x492 <__vector_18+0x1e>
		}
	else if(ch=='s')
 48c:	83 37       	cpi	r24, 0x73	; 115
 48e:	09 f4       	brne	.+2      	; 0x492 <__vector_18+0x1e>
		{
			PORTB &= ~(1<<PINB4);
 490:	2c 98       	cbi	0x05, 4	; 5
		}
 492:	8f 91       	pop	r24
 494:	0f 90       	pop	r0
 496:	0f be       	out	0x3f, r0	; 63
 498:	0f 90       	pop	r0
 49a:	1f 90       	pop	r1
 49c:	18 95       	reti

0000049e <main>:


int main(void)
{	
	
	PWM_init();
 49e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <PWM_init>
	timer1_init();
 4a2:	0e 94 e5 02 	call	0x5ca	; 0x5ca <timer1_init>
	timer2_init();
 4a6:	0e 94 69 02 	call	0x4d2	; 0x4d2 <timer2_init>
	USART_Init(MYUBRR);
 4aa:	87 e6       	ldi	r24, 0x67	; 103
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 26 02 	call	0x44c	; 0x44c <USART_Init>
	adc_init();
 4b2:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <adc_init>
	display_init();
 4b6:	0e 94 9e 00 	call	0x13c	; 0x13c <display_init>
	pushbutton_init();
 4ba:	0e 94 a5 00 	call	0x14a	; 0x14a <pushbutton_init>
	
	sei();
 4be:	78 94       	sei
	
    while (1) 
    {
		
    }
 4c0:	ff cf       	rjmp	.-2      	; 0x4c0 <main+0x22>

000004c2 <PWM_init>:
void PWM_init()
{
	//Fast PWM mode, clear on compare match
	//TCCR0A|=(1<<COM0A1)|(1<<WGM01)|(1<<WGM00);
	//Phase correct, clear on compare match
	TCCR0A|=(1<<COM0A1)|(1<<WGM00);
 4c2:	84 b5       	in	r24, 0x24	; 36
 4c4:	81 68       	ori	r24, 0x81	; 129
 4c6:	84 bd       	out	0x24, r24	; 36
	TCCR0B|=(1<<CS00);	//no prescaler
 4c8:	85 b5       	in	r24, 0x25	; 37
 4ca:	81 60       	ori	r24, 0x01	; 1
 4cc:	85 bd       	out	0x25, r24	; 37
	//PWM pin
	DDRD|=(1<<PIND6);
 4ce:	56 9a       	sbi	0x0a, 6	; 10
 4d0:	08 95       	ret

000004d2 <timer2_init>:
}

void timer2_init()
{
	//TCNT2 = 3036;
	TCCR2B|=(1<<CS22)|(1<<CS21)|(1<<CS20); //1024 prescaler
 4d2:	e1 eb       	ldi	r30, 0xB1	; 177
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	80 81       	ld	r24, Z
 4d8:	87 60       	ori	r24, 0x07	; 7
 4da:	80 83       	st	Z, r24
	//enabling overflow interrupt
	TIMSK2|=(1<<TOIE2);
 4dc:	e0 e7       	ldi	r30, 0x70	; 112
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	80 81       	ld	r24, Z
 4e2:	81 60       	ori	r24, 0x01	; 1
 4e4:	80 83       	st	Z, r24
 4e6:	08 95       	ret

000004e8 <__vector_9>:

}


ISR	(TIMER2_OVF_vect)
{
 4e8:	1f 92       	push	r1
 4ea:	0f 92       	push	r0
 4ec:	0f b6       	in	r0, 0x3f	; 63
 4ee:	0f 92       	push	r0
 4f0:	11 24       	eor	r1, r1
 4f2:	2f 93       	push	r18
 4f4:	3f 93       	push	r19
 4f6:	8f 93       	push	r24
 4f8:	9f 93       	push	r25
	t++;
 4fa:	80 91 04 01 	lds	r24, 0x0104
 4fe:	90 91 05 01 	lds	r25, 0x0105
 502:	01 96       	adiw	r24, 0x01	; 1
 504:	90 93 05 01 	sts	0x0105, r25
 508:	80 93 04 01 	sts	0x0104, r24
	switch(state)
 50c:	20 91 02 01 	lds	r18, 0x0102
 510:	30 91 03 01 	lds	r19, 0x0103
 514:	21 30       	cpi	r18, 0x01	; 1
 516:	31 05       	cpc	r19, r1
 518:	f9 f0       	breq	.+62     	; 0x558 <__vector_9+0x70>
 51a:	1c f4       	brge	.+6      	; 0x522 <__vector_9+0x3a>
 51c:	23 2b       	or	r18, r19
 51e:	41 f0       	breq	.+16     	; 0x530 <__vector_9+0x48>
 520:	4b c0       	rjmp	.+150    	; 0x5b8 <__vector_9+0xd0>
 522:	22 30       	cpi	r18, 0x02	; 2
 524:	31 05       	cpc	r19, r1
 526:	29 f1       	breq	.+74     	; 0x572 <__vector_9+0x8a>
 528:	23 30       	cpi	r18, 0x03	; 3
 52a:	31 05       	cpc	r19, r1
 52c:	b1 f1       	breq	.+108    	; 0x59a <__vector_9+0xb2>
 52e:	44 c0       	rjmp	.+136    	; 0x5b8 <__vector_9+0xd0>
	{
		case 0: OCR0A = OCR0A +	4;
 530:	87 b5       	in	r24, 0x27	; 39
 532:	8c 5f       	subi	r24, 0xFC	; 252
 534:	87 bd       	out	0x27, r24	; 39
		if(t==61)
 536:	80 91 04 01 	lds	r24, 0x0104
 53a:	90 91 05 01 	lds	r25, 0x0105
 53e:	cd 97       	sbiw	r24, 0x3d	; 61
 540:	d9 f5       	brne	.+118    	; 0x5b8 <__vector_9+0xd0>
		{
			state=1;
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	90 93 03 01 	sts	0x0103, r25
 54a:	80 93 02 01 	sts	0x0102, r24
			t=0;
 54e:	10 92 05 01 	sts	0x0105, r1
 552:	10 92 04 01 	sts	0x0104, r1
 556:	30 c0       	rjmp	.+96     	; 0x5b8 <__vector_9+0xd0>
		}
		break;
		case 1:	
		if(t==61)
 558:	cd 97       	sbiw	r24, 0x3d	; 61
 55a:	71 f5       	brne	.+92     	; 0x5b8 <__vector_9+0xd0>
		{
			
			state=2;
 55c:	82 e0       	ldi	r24, 0x02	; 2
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	90 93 03 01 	sts	0x0103, r25
 564:	80 93 02 01 	sts	0x0102, r24
			t=0;
 568:	10 92 05 01 	sts	0x0105, r1
 56c:	10 92 04 01 	sts	0x0104, r1
 570:	23 c0       	rjmp	.+70     	; 0x5b8 <__vector_9+0xd0>
		}
		break;
		case 2:	OCR0A = OCR0A - 4;
 572:	87 b5       	in	r24, 0x27	; 39
 574:	84 50       	subi	r24, 0x04	; 4
 576:	87 bd       	out	0x27, r24	; 39
		if(t==61)
 578:	80 91 04 01 	lds	r24, 0x0104
 57c:	90 91 05 01 	lds	r25, 0x0105
 580:	cd 97       	sbiw	r24, 0x3d	; 61
 582:	d1 f4       	brne	.+52     	; 0x5b8 <__vector_9+0xd0>
		{
			state=3;
 584:	83 e0       	ldi	r24, 0x03	; 3
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	90 93 03 01 	sts	0x0103, r25
 58c:	80 93 02 01 	sts	0x0102, r24
			t=0;
 590:	10 92 05 01 	sts	0x0105, r1
 594:	10 92 04 01 	sts	0x0104, r1
 598:	0f c0       	rjmp	.+30     	; 0x5b8 <__vector_9+0xd0>
		}
		break;
		case 3: OCR0A=0;
 59a:	17 bc       	out	0x27, r1	; 39
		if(t==61)
 59c:	80 91 04 01 	lds	r24, 0x0104
 5a0:	90 91 05 01 	lds	r25, 0x0105
 5a4:	cd 97       	sbiw	r24, 0x3d	; 61
 5a6:	41 f4       	brne	.+16     	; 0x5b8 <__vector_9+0xd0>
		{
			state=0;
 5a8:	10 92 03 01 	sts	0x0103, r1
 5ac:	10 92 02 01 	sts	0x0102, r1
			t=0;
 5b0:	10 92 05 01 	sts	0x0105, r1
 5b4:	10 92 04 01 	sts	0x0104, r1
		}
		break;
	}

}
 5b8:	9f 91       	pop	r25
 5ba:	8f 91       	pop	r24
 5bc:	3f 91       	pop	r19
 5be:	2f 91       	pop	r18
 5c0:	0f 90       	pop	r0
 5c2:	0f be       	out	0x3f, r0	; 63
 5c4:	0f 90       	pop	r0
 5c6:	1f 90       	pop	r1
 5c8:	18 95       	reti

000005ca <timer1_init>:

void timer1_init()
{
	//TIMER 1 (16 bit)    -    normal mode
	//prescaler 1024
	TCCR1B |=(1<<CS12)|(1<<CS10)|(1<<WGM12);
 5ca:	e1 e8       	ldi	r30, 0x81	; 129
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	80 81       	ld	r24, Z
 5d0:	8d 60       	ori	r24, 0x0D	; 13
 5d2:	80 83       	st	Z, r24
	//enabling output compare match A
	TIMSK1 |= (1<<OCIE1A);
 5d4:	ef e6       	ldi	r30, 0x6F	; 111
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	80 81       	ld	r24, Z
 5da:	82 60       	ori	r24, 0x02	; 2
 5dc:	80 83       	st	Z, r24
	//setting the output compare register A
	OCR1A = 15625;
 5de:	89 e0       	ldi	r24, 0x09	; 9
 5e0:	9d e3       	ldi	r25, 0x3D	; 61
 5e2:	90 93 89 00 	sts	0x0089, r25
 5e6:	80 93 88 00 	sts	0x0088, r24
	
	//setting PIND7 as output - LED
	DDRD|=(1<<PIND7);
 5ea:	57 9a       	sbi	0x0a, 7	; 10
 5ec:	08 95       	ret

000005ee <__vector_11>:
}



ISR(TIMER1_COMPA_vect)
{
 5ee:	1f 92       	push	r1
 5f0:	0f 92       	push	r0
 5f2:	0f b6       	in	r0, 0x3f	; 63
 5f4:	0f 92       	push	r0
 5f6:	11 24       	eor	r1, r1
 5f8:	8f 93       	push	r24

	PORTD ^= ( 1 << PIND7 );
 5fa:	8b b1       	in	r24, 0x0b	; 11
 5fc:	80 58       	subi	r24, 0x80	; 128
 5fe:	8b b9       	out	0x0b, r24	; 11
}
 600:	8f 91       	pop	r24
 602:	0f 90       	pop	r0
 604:	0f be       	out	0x3f, r0	; 63
 606:	0f 90       	pop	r0
 608:	1f 90       	pop	r1
 60a:	18 95       	reti

0000060c <__divsf3>:
 60c:	0e 94 1a 03 	call	0x634	; 0x634 <__divsf3x>
 610:	0c 94 02 04 	jmp	0x804	; 0x804 <__fp_round>
 614:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__fp_pscB>
 618:	58 f0       	brcs	.+22     	; 0x630 <__divsf3+0x24>
 61a:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__fp_pscA>
 61e:	40 f0       	brcs	.+16     	; 0x630 <__divsf3+0x24>
 620:	29 f4       	brne	.+10     	; 0x62c <__divsf3+0x20>
 622:	5f 3f       	cpi	r21, 0xFF	; 255
 624:	29 f0       	breq	.+10     	; 0x630 <__divsf3+0x24>
 626:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_inf>
 62a:	51 11       	cpse	r21, r1
 62c:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_szero>
 630:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__fp_nan>

00000634 <__divsf3x>:
 634:	0e 94 13 04 	call	0x826	; 0x826 <__fp_split3>
 638:	68 f3       	brcs	.-38     	; 0x614 <__divsf3+0x8>

0000063a <__divsf3_pse>:
 63a:	99 23       	and	r25, r25
 63c:	b1 f3       	breq	.-20     	; 0x62a <__divsf3+0x1e>
 63e:	55 23       	and	r21, r21
 640:	91 f3       	breq	.-28     	; 0x626 <__divsf3+0x1a>
 642:	95 1b       	sub	r25, r21
 644:	55 0b       	sbc	r21, r21
 646:	bb 27       	eor	r27, r27
 648:	aa 27       	eor	r26, r26
 64a:	62 17       	cp	r22, r18
 64c:	73 07       	cpc	r23, r19
 64e:	84 07       	cpc	r24, r20
 650:	38 f0       	brcs	.+14     	; 0x660 <__divsf3_pse+0x26>
 652:	9f 5f       	subi	r25, 0xFF	; 255
 654:	5f 4f       	sbci	r21, 0xFF	; 255
 656:	22 0f       	add	r18, r18
 658:	33 1f       	adc	r19, r19
 65a:	44 1f       	adc	r20, r20
 65c:	aa 1f       	adc	r26, r26
 65e:	a9 f3       	breq	.-22     	; 0x64a <__divsf3_pse+0x10>
 660:	35 d0       	rcall	.+106    	; 0x6cc <__divsf3_pse+0x92>
 662:	0e 2e       	mov	r0, r30
 664:	3a f0       	brmi	.+14     	; 0x674 <__divsf3_pse+0x3a>
 666:	e0 e8       	ldi	r30, 0x80	; 128
 668:	32 d0       	rcall	.+100    	; 0x6ce <__divsf3_pse+0x94>
 66a:	91 50       	subi	r25, 0x01	; 1
 66c:	50 40       	sbci	r21, 0x00	; 0
 66e:	e6 95       	lsr	r30
 670:	00 1c       	adc	r0, r0
 672:	ca f7       	brpl	.-14     	; 0x666 <__divsf3_pse+0x2c>
 674:	2b d0       	rcall	.+86     	; 0x6cc <__divsf3_pse+0x92>
 676:	fe 2f       	mov	r31, r30
 678:	29 d0       	rcall	.+82     	; 0x6cc <__divsf3_pse+0x92>
 67a:	66 0f       	add	r22, r22
 67c:	77 1f       	adc	r23, r23
 67e:	88 1f       	adc	r24, r24
 680:	bb 1f       	adc	r27, r27
 682:	26 17       	cp	r18, r22
 684:	37 07       	cpc	r19, r23
 686:	48 07       	cpc	r20, r24
 688:	ab 07       	cpc	r26, r27
 68a:	b0 e8       	ldi	r27, 0x80	; 128
 68c:	09 f0       	breq	.+2      	; 0x690 <__divsf3_pse+0x56>
 68e:	bb 0b       	sbc	r27, r27
 690:	80 2d       	mov	r24, r0
 692:	bf 01       	movw	r22, r30
 694:	ff 27       	eor	r31, r31
 696:	93 58       	subi	r25, 0x83	; 131
 698:	5f 4f       	sbci	r21, 0xFF	; 255
 69a:	3a f0       	brmi	.+14     	; 0x6aa <__divsf3_pse+0x70>
 69c:	9e 3f       	cpi	r25, 0xFE	; 254
 69e:	51 05       	cpc	r21, r1
 6a0:	78 f0       	brcs	.+30     	; 0x6c0 <__divsf3_pse+0x86>
 6a2:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_inf>
 6a6:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_szero>
 6aa:	5f 3f       	cpi	r21, 0xFF	; 255
 6ac:	e4 f3       	brlt	.-8      	; 0x6a6 <__divsf3_pse+0x6c>
 6ae:	98 3e       	cpi	r25, 0xE8	; 232
 6b0:	d4 f3       	brlt	.-12     	; 0x6a6 <__divsf3_pse+0x6c>
 6b2:	86 95       	lsr	r24
 6b4:	77 95       	ror	r23
 6b6:	67 95       	ror	r22
 6b8:	b7 95       	ror	r27
 6ba:	f7 95       	ror	r31
 6bc:	9f 5f       	subi	r25, 0xFF	; 255
 6be:	c9 f7       	brne	.-14     	; 0x6b2 <__divsf3_pse+0x78>
 6c0:	88 0f       	add	r24, r24
 6c2:	91 1d       	adc	r25, r1
 6c4:	96 95       	lsr	r25
 6c6:	87 95       	ror	r24
 6c8:	97 f9       	bld	r25, 7
 6ca:	08 95       	ret
 6cc:	e1 e0       	ldi	r30, 0x01	; 1
 6ce:	66 0f       	add	r22, r22
 6d0:	77 1f       	adc	r23, r23
 6d2:	88 1f       	adc	r24, r24
 6d4:	bb 1f       	adc	r27, r27
 6d6:	62 17       	cp	r22, r18
 6d8:	73 07       	cpc	r23, r19
 6da:	84 07       	cpc	r24, r20
 6dc:	ba 07       	cpc	r27, r26
 6de:	20 f0       	brcs	.+8      	; 0x6e8 <__divsf3_pse+0xae>
 6e0:	62 1b       	sub	r22, r18
 6e2:	73 0b       	sbc	r23, r19
 6e4:	84 0b       	sbc	r24, r20
 6e6:	ba 0b       	sbc	r27, r26
 6e8:	ee 1f       	adc	r30, r30
 6ea:	88 f7       	brcc	.-30     	; 0x6ce <__divsf3_pse+0x94>
 6ec:	e0 95       	com	r30
 6ee:	08 95       	ret

000006f0 <__fixsfsi>:
 6f0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__fixunssfsi>
 6f4:	68 94       	set
 6f6:	b1 11       	cpse	r27, r1
 6f8:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_szero>
 6fc:	08 95       	ret

000006fe <__fixunssfsi>:
 6fe:	0e 94 1b 04 	call	0x836	; 0x836 <__fp_splitA>
 702:	88 f0       	brcs	.+34     	; 0x726 <__fixunssfsi+0x28>
 704:	9f 57       	subi	r25, 0x7F	; 127
 706:	98 f0       	brcs	.+38     	; 0x72e <__fixunssfsi+0x30>
 708:	b9 2f       	mov	r27, r25
 70a:	99 27       	eor	r25, r25
 70c:	b7 51       	subi	r27, 0x17	; 23
 70e:	b0 f0       	brcs	.+44     	; 0x73c <__fixunssfsi+0x3e>
 710:	e1 f0       	breq	.+56     	; 0x74a <__fixunssfsi+0x4c>
 712:	66 0f       	add	r22, r22
 714:	77 1f       	adc	r23, r23
 716:	88 1f       	adc	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	1a f0       	brmi	.+6      	; 0x722 <__fixunssfsi+0x24>
 71c:	ba 95       	dec	r27
 71e:	c9 f7       	brne	.-14     	; 0x712 <__fixunssfsi+0x14>
 720:	14 c0       	rjmp	.+40     	; 0x74a <__fixunssfsi+0x4c>
 722:	b1 30       	cpi	r27, 0x01	; 1
 724:	91 f0       	breq	.+36     	; 0x74a <__fixunssfsi+0x4c>
 726:	0e 94 35 04 	call	0x86a	; 0x86a <__fp_zero>
 72a:	b1 e0       	ldi	r27, 0x01	; 1
 72c:	08 95       	ret
 72e:	0c 94 35 04 	jmp	0x86a	; 0x86a <__fp_zero>
 732:	67 2f       	mov	r22, r23
 734:	78 2f       	mov	r23, r24
 736:	88 27       	eor	r24, r24
 738:	b8 5f       	subi	r27, 0xF8	; 248
 73a:	39 f0       	breq	.+14     	; 0x74a <__fixunssfsi+0x4c>
 73c:	b9 3f       	cpi	r27, 0xF9	; 249
 73e:	cc f3       	brlt	.-14     	; 0x732 <__fixunssfsi+0x34>
 740:	86 95       	lsr	r24
 742:	77 95       	ror	r23
 744:	67 95       	ror	r22
 746:	b3 95       	inc	r27
 748:	d9 f7       	brne	.-10     	; 0x740 <__fixunssfsi+0x42>
 74a:	3e f4       	brtc	.+14     	; 0x75a <__fixunssfsi+0x5c>
 74c:	90 95       	com	r25
 74e:	80 95       	com	r24
 750:	70 95       	com	r23
 752:	61 95       	neg	r22
 754:	7f 4f       	sbci	r23, 0xFF	; 255
 756:	8f 4f       	sbci	r24, 0xFF	; 255
 758:	9f 4f       	sbci	r25, 0xFF	; 255
 75a:	08 95       	ret

0000075c <__floatunsisf>:
 75c:	e8 94       	clt
 75e:	09 c0       	rjmp	.+18     	; 0x772 <__floatsisf+0x12>

00000760 <__floatsisf>:
 760:	97 fb       	bst	r25, 7
 762:	3e f4       	brtc	.+14     	; 0x772 <__floatsisf+0x12>
 764:	90 95       	com	r25
 766:	80 95       	com	r24
 768:	70 95       	com	r23
 76a:	61 95       	neg	r22
 76c:	7f 4f       	sbci	r23, 0xFF	; 255
 76e:	8f 4f       	sbci	r24, 0xFF	; 255
 770:	9f 4f       	sbci	r25, 0xFF	; 255
 772:	99 23       	and	r25, r25
 774:	a9 f0       	breq	.+42     	; 0x7a0 <__floatsisf+0x40>
 776:	f9 2f       	mov	r31, r25
 778:	96 e9       	ldi	r25, 0x96	; 150
 77a:	bb 27       	eor	r27, r27
 77c:	93 95       	inc	r25
 77e:	f6 95       	lsr	r31
 780:	87 95       	ror	r24
 782:	77 95       	ror	r23
 784:	67 95       	ror	r22
 786:	b7 95       	ror	r27
 788:	f1 11       	cpse	r31, r1
 78a:	f8 cf       	rjmp	.-16     	; 0x77c <__floatsisf+0x1c>
 78c:	fa f4       	brpl	.+62     	; 0x7cc <__floatsisf+0x6c>
 78e:	bb 0f       	add	r27, r27
 790:	11 f4       	brne	.+4      	; 0x796 <__floatsisf+0x36>
 792:	60 ff       	sbrs	r22, 0
 794:	1b c0       	rjmp	.+54     	; 0x7cc <__floatsisf+0x6c>
 796:	6f 5f       	subi	r22, 0xFF	; 255
 798:	7f 4f       	sbci	r23, 0xFF	; 255
 79a:	8f 4f       	sbci	r24, 0xFF	; 255
 79c:	9f 4f       	sbci	r25, 0xFF	; 255
 79e:	16 c0       	rjmp	.+44     	; 0x7cc <__floatsisf+0x6c>
 7a0:	88 23       	and	r24, r24
 7a2:	11 f0       	breq	.+4      	; 0x7a8 <__floatsisf+0x48>
 7a4:	96 e9       	ldi	r25, 0x96	; 150
 7a6:	11 c0       	rjmp	.+34     	; 0x7ca <__floatsisf+0x6a>
 7a8:	77 23       	and	r23, r23
 7aa:	21 f0       	breq	.+8      	; 0x7b4 <__floatsisf+0x54>
 7ac:	9e e8       	ldi	r25, 0x8E	; 142
 7ae:	87 2f       	mov	r24, r23
 7b0:	76 2f       	mov	r23, r22
 7b2:	05 c0       	rjmp	.+10     	; 0x7be <__floatsisf+0x5e>
 7b4:	66 23       	and	r22, r22
 7b6:	71 f0       	breq	.+28     	; 0x7d4 <__floatsisf+0x74>
 7b8:	96 e8       	ldi	r25, 0x86	; 134
 7ba:	86 2f       	mov	r24, r22
 7bc:	70 e0       	ldi	r23, 0x00	; 0
 7be:	60 e0       	ldi	r22, 0x00	; 0
 7c0:	2a f0       	brmi	.+10     	; 0x7cc <__floatsisf+0x6c>
 7c2:	9a 95       	dec	r25
 7c4:	66 0f       	add	r22, r22
 7c6:	77 1f       	adc	r23, r23
 7c8:	88 1f       	adc	r24, r24
 7ca:	da f7       	brpl	.-10     	; 0x7c2 <__floatsisf+0x62>
 7cc:	88 0f       	add	r24, r24
 7ce:	96 95       	lsr	r25
 7d0:	87 95       	ror	r24
 7d2:	97 f9       	bld	r25, 7
 7d4:	08 95       	ret

000007d6 <__fp_inf>:
 7d6:	97 f9       	bld	r25, 7
 7d8:	9f 67       	ori	r25, 0x7F	; 127
 7da:	80 e8       	ldi	r24, 0x80	; 128
 7dc:	70 e0       	ldi	r23, 0x00	; 0
 7de:	60 e0       	ldi	r22, 0x00	; 0
 7e0:	08 95       	ret

000007e2 <__fp_nan>:
 7e2:	9f ef       	ldi	r25, 0xFF	; 255
 7e4:	80 ec       	ldi	r24, 0xC0	; 192
 7e6:	08 95       	ret

000007e8 <__fp_pscA>:
 7e8:	00 24       	eor	r0, r0
 7ea:	0a 94       	dec	r0
 7ec:	16 16       	cp	r1, r22
 7ee:	17 06       	cpc	r1, r23
 7f0:	18 06       	cpc	r1, r24
 7f2:	09 06       	cpc	r0, r25
 7f4:	08 95       	ret

000007f6 <__fp_pscB>:
 7f6:	00 24       	eor	r0, r0
 7f8:	0a 94       	dec	r0
 7fa:	12 16       	cp	r1, r18
 7fc:	13 06       	cpc	r1, r19
 7fe:	14 06       	cpc	r1, r20
 800:	05 06       	cpc	r0, r21
 802:	08 95       	ret

00000804 <__fp_round>:
 804:	09 2e       	mov	r0, r25
 806:	03 94       	inc	r0
 808:	00 0c       	add	r0, r0
 80a:	11 f4       	brne	.+4      	; 0x810 <__fp_round+0xc>
 80c:	88 23       	and	r24, r24
 80e:	52 f0       	brmi	.+20     	; 0x824 <__fp_round+0x20>
 810:	bb 0f       	add	r27, r27
 812:	40 f4       	brcc	.+16     	; 0x824 <__fp_round+0x20>
 814:	bf 2b       	or	r27, r31
 816:	11 f4       	brne	.+4      	; 0x81c <__fp_round+0x18>
 818:	60 ff       	sbrs	r22, 0
 81a:	04 c0       	rjmp	.+8      	; 0x824 <__fp_round+0x20>
 81c:	6f 5f       	subi	r22, 0xFF	; 255
 81e:	7f 4f       	sbci	r23, 0xFF	; 255
 820:	8f 4f       	sbci	r24, 0xFF	; 255
 822:	9f 4f       	sbci	r25, 0xFF	; 255
 824:	08 95       	ret

00000826 <__fp_split3>:
 826:	57 fd       	sbrc	r21, 7
 828:	90 58       	subi	r25, 0x80	; 128
 82a:	44 0f       	add	r20, r20
 82c:	55 1f       	adc	r21, r21
 82e:	59 f0       	breq	.+22     	; 0x846 <__fp_splitA+0x10>
 830:	5f 3f       	cpi	r21, 0xFF	; 255
 832:	71 f0       	breq	.+28     	; 0x850 <__fp_splitA+0x1a>
 834:	47 95       	ror	r20

00000836 <__fp_splitA>:
 836:	88 0f       	add	r24, r24
 838:	97 fb       	bst	r25, 7
 83a:	99 1f       	adc	r25, r25
 83c:	61 f0       	breq	.+24     	; 0x856 <__fp_splitA+0x20>
 83e:	9f 3f       	cpi	r25, 0xFF	; 255
 840:	79 f0       	breq	.+30     	; 0x860 <__fp_splitA+0x2a>
 842:	87 95       	ror	r24
 844:	08 95       	ret
 846:	12 16       	cp	r1, r18
 848:	13 06       	cpc	r1, r19
 84a:	14 06       	cpc	r1, r20
 84c:	55 1f       	adc	r21, r21
 84e:	f2 cf       	rjmp	.-28     	; 0x834 <__fp_split3+0xe>
 850:	46 95       	lsr	r20
 852:	f1 df       	rcall	.-30     	; 0x836 <__fp_splitA>
 854:	08 c0       	rjmp	.+16     	; 0x866 <__fp_splitA+0x30>
 856:	16 16       	cp	r1, r22
 858:	17 06       	cpc	r1, r23
 85a:	18 06       	cpc	r1, r24
 85c:	99 1f       	adc	r25, r25
 85e:	f1 cf       	rjmp	.-30     	; 0x842 <__fp_splitA+0xc>
 860:	86 95       	lsr	r24
 862:	71 05       	cpc	r23, r1
 864:	61 05       	cpc	r22, r1
 866:	08 94       	sec
 868:	08 95       	ret

0000086a <__fp_zero>:
 86a:	e8 94       	clt

0000086c <__fp_szero>:
 86c:	bb 27       	eor	r27, r27
 86e:	66 27       	eor	r22, r22
 870:	77 27       	eor	r23, r23
 872:	cb 01       	movw	r24, r22
 874:	97 f9       	bld	r25, 7
 876:	08 95       	ret

00000878 <__gesf2>:
 878:	0e 94 38 05 	call	0xa70	; 0xa70 <__fp_cmp>
 87c:	08 f4       	brcc	.+2      	; 0x880 <__gesf2+0x8>
 87e:	8f ef       	ldi	r24, 0xFF	; 255
 880:	08 95       	ret

00000882 <__mulsf3>:
 882:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__mulsf3x>
 886:	0c 94 02 04 	jmp	0x804	; 0x804 <__fp_round>
 88a:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__fp_pscA>
 88e:	38 f0       	brcs	.+14     	; 0x89e <__mulsf3+0x1c>
 890:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__fp_pscB>
 894:	20 f0       	brcs	.+8      	; 0x89e <__mulsf3+0x1c>
 896:	95 23       	and	r25, r21
 898:	11 f0       	breq	.+4      	; 0x89e <__mulsf3+0x1c>
 89a:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_inf>
 89e:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__fp_nan>
 8a2:	11 24       	eor	r1, r1
 8a4:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_szero>

000008a8 <__mulsf3x>:
 8a8:	0e 94 13 04 	call	0x826	; 0x826 <__fp_split3>
 8ac:	70 f3       	brcs	.-36     	; 0x88a <__mulsf3+0x8>

000008ae <__mulsf3_pse>:
 8ae:	95 9f       	mul	r25, r21
 8b0:	c1 f3       	breq	.-16     	; 0x8a2 <__mulsf3+0x20>
 8b2:	95 0f       	add	r25, r21
 8b4:	50 e0       	ldi	r21, 0x00	; 0
 8b6:	55 1f       	adc	r21, r21
 8b8:	62 9f       	mul	r22, r18
 8ba:	f0 01       	movw	r30, r0
 8bc:	72 9f       	mul	r23, r18
 8be:	bb 27       	eor	r27, r27
 8c0:	f0 0d       	add	r31, r0
 8c2:	b1 1d       	adc	r27, r1
 8c4:	63 9f       	mul	r22, r19
 8c6:	aa 27       	eor	r26, r26
 8c8:	f0 0d       	add	r31, r0
 8ca:	b1 1d       	adc	r27, r1
 8cc:	aa 1f       	adc	r26, r26
 8ce:	64 9f       	mul	r22, r20
 8d0:	66 27       	eor	r22, r22
 8d2:	b0 0d       	add	r27, r0
 8d4:	a1 1d       	adc	r26, r1
 8d6:	66 1f       	adc	r22, r22
 8d8:	82 9f       	mul	r24, r18
 8da:	22 27       	eor	r18, r18
 8dc:	b0 0d       	add	r27, r0
 8de:	a1 1d       	adc	r26, r1
 8e0:	62 1f       	adc	r22, r18
 8e2:	73 9f       	mul	r23, r19
 8e4:	b0 0d       	add	r27, r0
 8e6:	a1 1d       	adc	r26, r1
 8e8:	62 1f       	adc	r22, r18
 8ea:	83 9f       	mul	r24, r19
 8ec:	a0 0d       	add	r26, r0
 8ee:	61 1d       	adc	r22, r1
 8f0:	22 1f       	adc	r18, r18
 8f2:	74 9f       	mul	r23, r20
 8f4:	33 27       	eor	r19, r19
 8f6:	a0 0d       	add	r26, r0
 8f8:	61 1d       	adc	r22, r1
 8fa:	23 1f       	adc	r18, r19
 8fc:	84 9f       	mul	r24, r20
 8fe:	60 0d       	add	r22, r0
 900:	21 1d       	adc	r18, r1
 902:	82 2f       	mov	r24, r18
 904:	76 2f       	mov	r23, r22
 906:	6a 2f       	mov	r22, r26
 908:	11 24       	eor	r1, r1
 90a:	9f 57       	subi	r25, 0x7F	; 127
 90c:	50 40       	sbci	r21, 0x00	; 0
 90e:	9a f0       	brmi	.+38     	; 0x936 <__stack+0x37>
 910:	f1 f0       	breq	.+60     	; 0x94e <__stack+0x4f>
 912:	88 23       	and	r24, r24
 914:	4a f0       	brmi	.+18     	; 0x928 <__stack+0x29>
 916:	ee 0f       	add	r30, r30
 918:	ff 1f       	adc	r31, r31
 91a:	bb 1f       	adc	r27, r27
 91c:	66 1f       	adc	r22, r22
 91e:	77 1f       	adc	r23, r23
 920:	88 1f       	adc	r24, r24
 922:	91 50       	subi	r25, 0x01	; 1
 924:	50 40       	sbci	r21, 0x00	; 0
 926:	a9 f7       	brne	.-22     	; 0x912 <__stack+0x13>
 928:	9e 3f       	cpi	r25, 0xFE	; 254
 92a:	51 05       	cpc	r21, r1
 92c:	80 f0       	brcs	.+32     	; 0x94e <__stack+0x4f>
 92e:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_inf>
 932:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_szero>
 936:	5f 3f       	cpi	r21, 0xFF	; 255
 938:	e4 f3       	brlt	.-8      	; 0x932 <__stack+0x33>
 93a:	98 3e       	cpi	r25, 0xE8	; 232
 93c:	d4 f3       	brlt	.-12     	; 0x932 <__stack+0x33>
 93e:	86 95       	lsr	r24
 940:	77 95       	ror	r23
 942:	67 95       	ror	r22
 944:	b7 95       	ror	r27
 946:	f7 95       	ror	r31
 948:	e7 95       	ror	r30
 94a:	9f 5f       	subi	r25, 0xFF	; 255
 94c:	c1 f7       	brne	.-16     	; 0x93e <__stack+0x3f>
 94e:	fe 2b       	or	r31, r30
 950:	88 0f       	add	r24, r24
 952:	91 1d       	adc	r25, r1
 954:	96 95       	lsr	r25
 956:	87 95       	ror	r24
 958:	97 f9       	bld	r25, 7
 95a:	08 95       	ret

0000095c <pow>:
 95c:	fa 01       	movw	r30, r20
 95e:	ee 0f       	add	r30, r30
 960:	ff 1f       	adc	r31, r31
 962:	30 96       	adiw	r30, 0x00	; 0
 964:	21 05       	cpc	r18, r1
 966:	31 05       	cpc	r19, r1
 968:	a1 f1       	breq	.+104    	; 0x9d2 <pow+0x76>
 96a:	61 15       	cp	r22, r1
 96c:	71 05       	cpc	r23, r1
 96e:	61 f4       	brne	.+24     	; 0x988 <pow+0x2c>
 970:	80 38       	cpi	r24, 0x80	; 128
 972:	bf e3       	ldi	r27, 0x3F	; 63
 974:	9b 07       	cpc	r25, r27
 976:	49 f1       	breq	.+82     	; 0x9ca <pow+0x6e>
 978:	68 94       	set
 97a:	90 38       	cpi	r25, 0x80	; 128
 97c:	81 05       	cpc	r24, r1
 97e:	61 f0       	breq	.+24     	; 0x998 <pow+0x3c>
 980:	80 38       	cpi	r24, 0x80	; 128
 982:	bf ef       	ldi	r27, 0xFF	; 255
 984:	9b 07       	cpc	r25, r27
 986:	41 f0       	breq	.+16     	; 0x998 <pow+0x3c>
 988:	99 23       	and	r25, r25
 98a:	4a f5       	brpl	.+82     	; 0x9de <pow+0x82>
 98c:	ff 3f       	cpi	r31, 0xFF	; 255
 98e:	e1 05       	cpc	r30, r1
 990:	31 05       	cpc	r19, r1
 992:	21 05       	cpc	r18, r1
 994:	19 f1       	breq	.+70     	; 0x9dc <pow+0x80>
 996:	e8 94       	clt
 998:	08 94       	sec
 99a:	e7 95       	ror	r30
 99c:	d9 01       	movw	r26, r18
 99e:	aa 23       	and	r26, r26
 9a0:	29 f4       	brne	.+10     	; 0x9ac <pow+0x50>
 9a2:	ab 2f       	mov	r26, r27
 9a4:	be 2f       	mov	r27, r30
 9a6:	f8 5f       	subi	r31, 0xF8	; 248
 9a8:	d0 f3       	brcs	.-12     	; 0x99e <pow+0x42>
 9aa:	10 c0       	rjmp	.+32     	; 0x9cc <pow+0x70>
 9ac:	ff 5f       	subi	r31, 0xFF	; 255
 9ae:	70 f4       	brcc	.+28     	; 0x9cc <pow+0x70>
 9b0:	a6 95       	lsr	r26
 9b2:	e0 f7       	brcc	.-8      	; 0x9ac <pow+0x50>
 9b4:	f7 39       	cpi	r31, 0x97	; 151
 9b6:	50 f0       	brcs	.+20     	; 0x9cc <pow+0x70>
 9b8:	19 f0       	breq	.+6      	; 0x9c0 <pow+0x64>
 9ba:	ff 3a       	cpi	r31, 0xAF	; 175
 9bc:	38 f4       	brcc	.+14     	; 0x9cc <pow+0x70>
 9be:	9f 77       	andi	r25, 0x7F	; 127
 9c0:	9f 93       	push	r25
 9c2:	0d d0       	rcall	.+26     	; 0x9de <pow+0x82>
 9c4:	0f 90       	pop	r0
 9c6:	07 fc       	sbrc	r0, 7
 9c8:	90 58       	subi	r25, 0x80	; 128
 9ca:	08 95       	ret
 9cc:	46 f0       	brts	.+16     	; 0x9de <pow+0x82>
 9ce:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__fp_nan>
 9d2:	60 e0       	ldi	r22, 0x00	; 0
 9d4:	70 e0       	ldi	r23, 0x00	; 0
 9d6:	80 e8       	ldi	r24, 0x80	; 128
 9d8:	9f e3       	ldi	r25, 0x3F	; 63
 9da:	08 95       	ret
 9dc:	4f e7       	ldi	r20, 0x7F	; 127
 9de:	9f 77       	andi	r25, 0x7F	; 127
 9e0:	5f 93       	push	r21
 9e2:	4f 93       	push	r20
 9e4:	3f 93       	push	r19
 9e6:	2f 93       	push	r18
 9e8:	0e 94 cd 05 	call	0xb9a	; 0xb9a <log>
 9ec:	2f 91       	pop	r18
 9ee:	3f 91       	pop	r19
 9f0:	4f 91       	pop	r20
 9f2:	5f 91       	pop	r21
 9f4:	0e 94 41 04 	call	0x882	; 0x882 <__mulsf3>
 9f8:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <exp>
 9fc:	29 f4       	brne	.+10     	; 0xa08 <pow+0xac>
 9fe:	16 f0       	brts	.+4      	; 0xa04 <pow+0xa8>
 a00:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_inf>
 a04:	0c 94 35 04 	jmp	0x86a	; 0x86a <__fp_zero>
 a08:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__fp_nan>

00000a0c <exp>:
 a0c:	0e 94 1b 04 	call	0x836	; 0x836 <__fp_splitA>
 a10:	a8 f3       	brcs	.-22     	; 0x9fc <pow+0xa0>
 a12:	96 38       	cpi	r25, 0x86	; 134
 a14:	a0 f7       	brcc	.-24     	; 0x9fe <pow+0xa2>
 a16:	07 f8       	bld	r0, 7
 a18:	0f 92       	push	r0
 a1a:	e8 94       	clt
 a1c:	2b e3       	ldi	r18, 0x3B	; 59
 a1e:	3a ea       	ldi	r19, 0xAA	; 170
 a20:	48 eb       	ldi	r20, 0xB8	; 184
 a22:	5f e7       	ldi	r21, 0x7F	; 127
 a24:	0e 94 57 04 	call	0x8ae	; 0x8ae <__mulsf3_pse>
 a28:	0f 92       	push	r0
 a2a:	0f 92       	push	r0
 a2c:	0f 92       	push	r0
 a2e:	4d b7       	in	r20, 0x3d	; 61
 a30:	5e b7       	in	r21, 0x3e	; 62
 a32:	0f 92       	push	r0
 a34:	0e 94 15 06 	call	0xc2a	; 0xc2a <modf>
 a38:	ec e7       	ldi	r30, 0x7C	; 124
 a3a:	f0 e0       	ldi	r31, 0x00	; 0
 a3c:	0e 94 5c 05 	call	0xab8	; 0xab8 <__fp_powser>
 a40:	4f 91       	pop	r20
 a42:	5f 91       	pop	r21
 a44:	ef 91       	pop	r30
 a46:	ff 91       	pop	r31
 a48:	e5 95       	asr	r30
 a4a:	ee 1f       	adc	r30, r30
 a4c:	ff 1f       	adc	r31, r31
 a4e:	49 f0       	breq	.+18     	; 0xa62 <exp+0x56>
 a50:	fe 57       	subi	r31, 0x7E	; 126
 a52:	e0 68       	ori	r30, 0x80	; 128
 a54:	44 27       	eor	r20, r20
 a56:	ee 0f       	add	r30, r30
 a58:	44 1f       	adc	r20, r20
 a5a:	fa 95       	dec	r31
 a5c:	e1 f7       	brne	.-8      	; 0xa56 <exp+0x4a>
 a5e:	41 95       	neg	r20
 a60:	55 0b       	sbc	r21, r21
 a62:	0e 94 8f 05 	call	0xb1e	; 0xb1e <ldexp>
 a66:	0f 90       	pop	r0
 a68:	07 fe       	sbrs	r0, 7
 a6a:	0c 94 83 05 	jmp	0xb06	; 0xb06 <inverse>
 a6e:	08 95       	ret

00000a70 <__fp_cmp>:
 a70:	99 0f       	add	r25, r25
 a72:	00 08       	sbc	r0, r0
 a74:	55 0f       	add	r21, r21
 a76:	aa 0b       	sbc	r26, r26
 a78:	e0 e8       	ldi	r30, 0x80	; 128
 a7a:	fe ef       	ldi	r31, 0xFE	; 254
 a7c:	16 16       	cp	r1, r22
 a7e:	17 06       	cpc	r1, r23
 a80:	e8 07       	cpc	r30, r24
 a82:	f9 07       	cpc	r31, r25
 a84:	c0 f0       	brcs	.+48     	; 0xab6 <__fp_cmp+0x46>
 a86:	12 16       	cp	r1, r18
 a88:	13 06       	cpc	r1, r19
 a8a:	e4 07       	cpc	r30, r20
 a8c:	f5 07       	cpc	r31, r21
 a8e:	98 f0       	brcs	.+38     	; 0xab6 <__fp_cmp+0x46>
 a90:	62 1b       	sub	r22, r18
 a92:	73 0b       	sbc	r23, r19
 a94:	84 0b       	sbc	r24, r20
 a96:	95 0b       	sbc	r25, r21
 a98:	39 f4       	brne	.+14     	; 0xaa8 <__fp_cmp+0x38>
 a9a:	0a 26       	eor	r0, r26
 a9c:	61 f0       	breq	.+24     	; 0xab6 <__fp_cmp+0x46>
 a9e:	23 2b       	or	r18, r19
 aa0:	24 2b       	or	r18, r20
 aa2:	25 2b       	or	r18, r21
 aa4:	21 f4       	brne	.+8      	; 0xaae <__fp_cmp+0x3e>
 aa6:	08 95       	ret
 aa8:	0a 26       	eor	r0, r26
 aaa:	09 f4       	brne	.+2      	; 0xaae <__fp_cmp+0x3e>
 aac:	a1 40       	sbci	r26, 0x01	; 1
 aae:	a6 95       	lsr	r26
 ab0:	8f ef       	ldi	r24, 0xFF	; 255
 ab2:	81 1d       	adc	r24, r1
 ab4:	81 1d       	adc	r24, r1
 ab6:	08 95       	ret

00000ab8 <__fp_powser>:
 ab8:	df 93       	push	r29
 aba:	cf 93       	push	r28
 abc:	1f 93       	push	r17
 abe:	0f 93       	push	r16
 ac0:	ff 92       	push	r15
 ac2:	ef 92       	push	r14
 ac4:	df 92       	push	r13
 ac6:	7b 01       	movw	r14, r22
 ac8:	8c 01       	movw	r16, r24
 aca:	68 94       	set
 acc:	06 c0       	rjmp	.+12     	; 0xada <__fp_powser+0x22>
 ace:	da 2e       	mov	r13, r26
 ad0:	ef 01       	movw	r28, r30
 ad2:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__mulsf3x>
 ad6:	fe 01       	movw	r30, r28
 ad8:	e8 94       	clt
 ada:	a5 91       	lpm	r26, Z+
 adc:	25 91       	lpm	r18, Z+
 ade:	35 91       	lpm	r19, Z+
 ae0:	45 91       	lpm	r20, Z+
 ae2:	55 91       	lpm	r21, Z+
 ae4:	a6 f3       	brts	.-24     	; 0xace <__fp_powser+0x16>
 ae6:	ef 01       	movw	r28, r30
 ae8:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__addsf3x>
 aec:	fe 01       	movw	r30, r28
 aee:	97 01       	movw	r18, r14
 af0:	a8 01       	movw	r20, r16
 af2:	da 94       	dec	r13
 af4:	69 f7       	brne	.-38     	; 0xad0 <__fp_powser+0x18>
 af6:	df 90       	pop	r13
 af8:	ef 90       	pop	r14
 afa:	ff 90       	pop	r15
 afc:	0f 91       	pop	r16
 afe:	1f 91       	pop	r17
 b00:	cf 91       	pop	r28
 b02:	df 91       	pop	r29
 b04:	08 95       	ret

00000b06 <inverse>:
 b06:	9b 01       	movw	r18, r22
 b08:	ac 01       	movw	r20, r24
 b0a:	60 e0       	ldi	r22, 0x00	; 0
 b0c:	70 e0       	ldi	r23, 0x00	; 0
 b0e:	80 e8       	ldi	r24, 0x80	; 128
 b10:	9f e3       	ldi	r25, 0x3F	; 63
 b12:	0c 94 06 03 	jmp	0x60c	; 0x60c <__divsf3>
 b16:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_inf>
 b1a:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <__fp_mpack>

00000b1e <ldexp>:
 b1e:	0e 94 1b 04 	call	0x836	; 0x836 <__fp_splitA>
 b22:	d8 f3       	brcs	.-10     	; 0xb1a <inverse+0x14>
 b24:	99 23       	and	r25, r25
 b26:	c9 f3       	breq	.-14     	; 0xb1a <inverse+0x14>
 b28:	94 0f       	add	r25, r20
 b2a:	51 1d       	adc	r21, r1
 b2c:	a3 f3       	brvs	.-24     	; 0xb16 <inverse+0x10>
 b2e:	91 50       	subi	r25, 0x01	; 1
 b30:	50 40       	sbci	r21, 0x00	; 0
 b32:	94 f0       	brlt	.+36     	; 0xb58 <ldexp+0x3a>
 b34:	59 f0       	breq	.+22     	; 0xb4c <ldexp+0x2e>
 b36:	88 23       	and	r24, r24
 b38:	32 f0       	brmi	.+12     	; 0xb46 <ldexp+0x28>
 b3a:	66 0f       	add	r22, r22
 b3c:	77 1f       	adc	r23, r23
 b3e:	88 1f       	adc	r24, r24
 b40:	91 50       	subi	r25, 0x01	; 1
 b42:	50 40       	sbci	r21, 0x00	; 0
 b44:	c1 f7       	brne	.-16     	; 0xb36 <ldexp+0x18>
 b46:	9e 3f       	cpi	r25, 0xFE	; 254
 b48:	51 05       	cpc	r21, r1
 b4a:	2c f7       	brge	.-54     	; 0xb16 <inverse+0x10>
 b4c:	88 0f       	add	r24, r24
 b4e:	91 1d       	adc	r25, r1
 b50:	96 95       	lsr	r25
 b52:	87 95       	ror	r24
 b54:	97 f9       	bld	r25, 7
 b56:	08 95       	ret
 b58:	5f 3f       	cpi	r21, 0xFF	; 255
 b5a:	ac f0       	brlt	.+42     	; 0xb86 <ldexp+0x68>
 b5c:	98 3e       	cpi	r25, 0xE8	; 232
 b5e:	9c f0       	brlt	.+38     	; 0xb86 <ldexp+0x68>
 b60:	bb 27       	eor	r27, r27
 b62:	86 95       	lsr	r24
 b64:	77 95       	ror	r23
 b66:	67 95       	ror	r22
 b68:	b7 95       	ror	r27
 b6a:	08 f4       	brcc	.+2      	; 0xb6e <ldexp+0x50>
 b6c:	b1 60       	ori	r27, 0x01	; 1
 b6e:	93 95       	inc	r25
 b70:	c1 f7       	brne	.-16     	; 0xb62 <ldexp+0x44>
 b72:	bb 0f       	add	r27, r27
 b74:	58 f7       	brcc	.-42     	; 0xb4c <ldexp+0x2e>
 b76:	11 f4       	brne	.+4      	; 0xb7c <ldexp+0x5e>
 b78:	60 ff       	sbrs	r22, 0
 b7a:	e8 cf       	rjmp	.-48     	; 0xb4c <ldexp+0x2e>
 b7c:	6f 5f       	subi	r22, 0xFF	; 255
 b7e:	7f 4f       	sbci	r23, 0xFF	; 255
 b80:	8f 4f       	sbci	r24, 0xFF	; 255
 b82:	9f 4f       	sbci	r25, 0xFF	; 255
 b84:	e3 cf       	rjmp	.-58     	; 0xb4c <ldexp+0x2e>
 b86:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_szero>
 b8a:	16 f0       	brts	.+4      	; 0xb90 <ldexp+0x72>
 b8c:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <__fp_mpack>
 b90:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__fp_nan>
 b94:	68 94       	set
 b96:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_inf>

00000b9a <log>:
 b9a:	0e 94 1b 04 	call	0x836	; 0x836 <__fp_splitA>
 b9e:	a8 f3       	brcs	.-22     	; 0xb8a <ldexp+0x6c>
 ba0:	99 23       	and	r25, r25
 ba2:	c1 f3       	breq	.-16     	; 0xb94 <ldexp+0x76>
 ba4:	ae f3       	brts	.-22     	; 0xb90 <ldexp+0x72>
 ba6:	df 93       	push	r29
 ba8:	cf 93       	push	r28
 baa:	1f 93       	push	r17
 bac:	0f 93       	push	r16
 bae:	ff 92       	push	r15
 bb0:	c9 2f       	mov	r28, r25
 bb2:	dd 27       	eor	r29, r29
 bb4:	88 23       	and	r24, r24
 bb6:	2a f0       	brmi	.+10     	; 0xbc2 <log+0x28>
 bb8:	21 97       	sbiw	r28, 0x01	; 1
 bba:	66 0f       	add	r22, r22
 bbc:	77 1f       	adc	r23, r23
 bbe:	88 1f       	adc	r24, r24
 bc0:	da f7       	brpl	.-10     	; 0xbb8 <log+0x1e>
 bc2:	20 e0       	ldi	r18, 0x00	; 0
 bc4:	30 e0       	ldi	r19, 0x00	; 0
 bc6:	40 e8       	ldi	r20, 0x80	; 128
 bc8:	5f eb       	ldi	r21, 0xBF	; 191
 bca:	9f e3       	ldi	r25, 0x3F	; 63
 bcc:	88 39       	cpi	r24, 0x98	; 152
 bce:	20 f0       	brcs	.+8      	; 0xbd8 <log+0x3e>
 bd0:	80 3e       	cpi	r24, 0xE0	; 224
 bd2:	38 f0       	brcs	.+14     	; 0xbe2 <log+0x48>
 bd4:	21 96       	adiw	r28, 0x01	; 1
 bd6:	8f 77       	andi	r24, 0x7F	; 127
 bd8:	0e 94 4a 06 	call	0xc94	; 0xc94 <__addsf3>
 bdc:	e4 ea       	ldi	r30, 0xA4	; 164
 bde:	f0 e0       	ldi	r31, 0x00	; 0
 be0:	04 c0       	rjmp	.+8      	; 0xbea <log+0x50>
 be2:	0e 94 4a 06 	call	0xc94	; 0xc94 <__addsf3>
 be6:	e1 ed       	ldi	r30, 0xD1	; 209
 be8:	f0 e0       	ldi	r31, 0x00	; 0
 bea:	0e 94 5c 05 	call	0xab8	; 0xab8 <__fp_powser>
 bee:	8b 01       	movw	r16, r22
 bf0:	be 01       	movw	r22, r28
 bf2:	ec 01       	movw	r28, r24
 bf4:	fb 2e       	mov	r15, r27
 bf6:	6f 57       	subi	r22, 0x7F	; 127
 bf8:	71 09       	sbc	r23, r1
 bfa:	75 95       	asr	r23
 bfc:	77 1f       	adc	r23, r23
 bfe:	88 0b       	sbc	r24, r24
 c00:	99 0b       	sbc	r25, r25
 c02:	0e 94 b0 03 	call	0x760	; 0x760 <__floatsisf>
 c06:	28 e1       	ldi	r18, 0x18	; 24
 c08:	32 e7       	ldi	r19, 0x72	; 114
 c0a:	41 e3       	ldi	r20, 0x31	; 49
 c0c:	5f e3       	ldi	r21, 0x3F	; 63
 c0e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__mulsf3x>
 c12:	af 2d       	mov	r26, r15
 c14:	98 01       	movw	r18, r16
 c16:	ae 01       	movw	r20, r28
 c18:	ff 90       	pop	r15
 c1a:	0f 91       	pop	r16
 c1c:	1f 91       	pop	r17
 c1e:	cf 91       	pop	r28
 c20:	df 91       	pop	r29
 c22:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__addsf3x>
 c26:	0c 94 02 04 	jmp	0x804	; 0x804 <__fp_round>

00000c2a <modf>:
 c2a:	fa 01       	movw	r30, r20
 c2c:	dc 01       	movw	r26, r24
 c2e:	aa 0f       	add	r26, r26
 c30:	bb 1f       	adc	r27, r27
 c32:	9b 01       	movw	r18, r22
 c34:	ac 01       	movw	r20, r24
 c36:	bf 57       	subi	r27, 0x7F	; 127
 c38:	28 f4       	brcc	.+10     	; 0xc44 <modf+0x1a>
 c3a:	22 27       	eor	r18, r18
 c3c:	33 27       	eor	r19, r19
 c3e:	44 27       	eor	r20, r20
 c40:	50 78       	andi	r21, 0x80	; 128
 c42:	20 c0       	rjmp	.+64     	; 0xc84 <modf+0x5a>
 c44:	b7 51       	subi	r27, 0x17	; 23
 c46:	90 f4       	brcc	.+36     	; 0xc6c <modf+0x42>
 c48:	ab 2f       	mov	r26, r27
 c4a:	00 24       	eor	r0, r0
 c4c:	46 95       	lsr	r20
 c4e:	37 95       	ror	r19
 c50:	27 95       	ror	r18
 c52:	01 1c       	adc	r0, r1
 c54:	a3 95       	inc	r26
 c56:	d2 f3       	brmi	.-12     	; 0xc4c <modf+0x22>
 c58:	00 20       	and	r0, r0
 c5a:	71 f0       	breq	.+28     	; 0xc78 <modf+0x4e>
 c5c:	22 0f       	add	r18, r18
 c5e:	33 1f       	adc	r19, r19
 c60:	44 1f       	adc	r20, r20
 c62:	b3 95       	inc	r27
 c64:	da f3       	brmi	.-10     	; 0xc5c <modf+0x32>
 c66:	0e d0       	rcall	.+28     	; 0xc84 <modf+0x5a>
 c68:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__subsf3>
 c6c:	61 30       	cpi	r22, 0x01	; 1
 c6e:	71 05       	cpc	r23, r1
 c70:	a0 e8       	ldi	r26, 0x80	; 128
 c72:	8a 07       	cpc	r24, r26
 c74:	b9 46       	sbci	r27, 0x69	; 105
 c76:	30 f4       	brcc	.+12     	; 0xc84 <modf+0x5a>
 c78:	9b 01       	movw	r18, r22
 c7a:	ac 01       	movw	r20, r24
 c7c:	66 27       	eor	r22, r22
 c7e:	77 27       	eor	r23, r23
 c80:	88 27       	eor	r24, r24
 c82:	90 78       	andi	r25, 0x80	; 128
 c84:	30 96       	adiw	r30, 0x00	; 0
 c86:	21 f0       	breq	.+8      	; 0xc90 <modf+0x66>
 c88:	20 83       	st	Z, r18
 c8a:	31 83       	std	Z+1, r19	; 0x01
 c8c:	42 83       	std	Z+2, r20	; 0x02
 c8e:	53 83       	std	Z+3, r21	; 0x03
 c90:	08 95       	ret

00000c92 <__subsf3>:
 c92:	50 58       	subi	r21, 0x80	; 128

00000c94 <__addsf3>:
 c94:	bb 27       	eor	r27, r27
 c96:	aa 27       	eor	r26, r26
 c98:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__addsf3x>
 c9c:	0c 94 02 04 	jmp	0x804	; 0x804 <__fp_round>
 ca0:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__fp_pscA>
 ca4:	38 f0       	brcs	.+14     	; 0xcb4 <__addsf3+0x20>
 ca6:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__fp_pscB>
 caa:	20 f0       	brcs	.+8      	; 0xcb4 <__addsf3+0x20>
 cac:	39 f4       	brne	.+14     	; 0xcbc <__addsf3+0x28>
 cae:	9f 3f       	cpi	r25, 0xFF	; 255
 cb0:	19 f4       	brne	.+6      	; 0xcb8 <__addsf3+0x24>
 cb2:	26 f4       	brtc	.+8      	; 0xcbc <__addsf3+0x28>
 cb4:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__fp_nan>
 cb8:	0e f4       	brtc	.+2      	; 0xcbc <__addsf3+0x28>
 cba:	e0 95       	com	r30
 cbc:	e7 fb       	bst	r30, 7
 cbe:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_inf>

00000cc2 <__addsf3x>:
 cc2:	e9 2f       	mov	r30, r25
 cc4:	0e 94 13 04 	call	0x826	; 0x826 <__fp_split3>
 cc8:	58 f3       	brcs	.-42     	; 0xca0 <__addsf3+0xc>
 cca:	ba 17       	cp	r27, r26
 ccc:	62 07       	cpc	r22, r18
 cce:	73 07       	cpc	r23, r19
 cd0:	84 07       	cpc	r24, r20
 cd2:	95 07       	cpc	r25, r21
 cd4:	20 f0       	brcs	.+8      	; 0xcde <__addsf3x+0x1c>
 cd6:	79 f4       	brne	.+30     	; 0xcf6 <__addsf3x+0x34>
 cd8:	a6 f5       	brtc	.+104    	; 0xd42 <__addsf3x+0x80>
 cda:	0c 94 35 04 	jmp	0x86a	; 0x86a <__fp_zero>
 cde:	0e f4       	brtc	.+2      	; 0xce2 <__addsf3x+0x20>
 ce0:	e0 95       	com	r30
 ce2:	0b 2e       	mov	r0, r27
 ce4:	ba 2f       	mov	r27, r26
 ce6:	a0 2d       	mov	r26, r0
 ce8:	0b 01       	movw	r0, r22
 cea:	b9 01       	movw	r22, r18
 cec:	90 01       	movw	r18, r0
 cee:	0c 01       	movw	r0, r24
 cf0:	ca 01       	movw	r24, r20
 cf2:	a0 01       	movw	r20, r0
 cf4:	11 24       	eor	r1, r1
 cf6:	ff 27       	eor	r31, r31
 cf8:	59 1b       	sub	r21, r25
 cfa:	99 f0       	breq	.+38     	; 0xd22 <__addsf3x+0x60>
 cfc:	59 3f       	cpi	r21, 0xF9	; 249
 cfe:	50 f4       	brcc	.+20     	; 0xd14 <__addsf3x+0x52>
 d00:	50 3e       	cpi	r21, 0xE0	; 224
 d02:	68 f1       	brcs	.+90     	; 0xd5e <__addsf3x+0x9c>
 d04:	1a 16       	cp	r1, r26
 d06:	f0 40       	sbci	r31, 0x00	; 0
 d08:	a2 2f       	mov	r26, r18
 d0a:	23 2f       	mov	r18, r19
 d0c:	34 2f       	mov	r19, r20
 d0e:	44 27       	eor	r20, r20
 d10:	58 5f       	subi	r21, 0xF8	; 248
 d12:	f3 cf       	rjmp	.-26     	; 0xcfa <__addsf3x+0x38>
 d14:	46 95       	lsr	r20
 d16:	37 95       	ror	r19
 d18:	27 95       	ror	r18
 d1a:	a7 95       	ror	r26
 d1c:	f0 40       	sbci	r31, 0x00	; 0
 d1e:	53 95       	inc	r21
 d20:	c9 f7       	brne	.-14     	; 0xd14 <__addsf3x+0x52>
 d22:	7e f4       	brtc	.+30     	; 0xd42 <__addsf3x+0x80>
 d24:	1f 16       	cp	r1, r31
 d26:	ba 0b       	sbc	r27, r26
 d28:	62 0b       	sbc	r22, r18
 d2a:	73 0b       	sbc	r23, r19
 d2c:	84 0b       	sbc	r24, r20
 d2e:	ba f0       	brmi	.+46     	; 0xd5e <__addsf3x+0x9c>
 d30:	91 50       	subi	r25, 0x01	; 1
 d32:	a1 f0       	breq	.+40     	; 0xd5c <__addsf3x+0x9a>
 d34:	ff 0f       	add	r31, r31
 d36:	bb 1f       	adc	r27, r27
 d38:	66 1f       	adc	r22, r22
 d3a:	77 1f       	adc	r23, r23
 d3c:	88 1f       	adc	r24, r24
 d3e:	c2 f7       	brpl	.-16     	; 0xd30 <__addsf3x+0x6e>
 d40:	0e c0       	rjmp	.+28     	; 0xd5e <__addsf3x+0x9c>
 d42:	ba 0f       	add	r27, r26
 d44:	62 1f       	adc	r22, r18
 d46:	73 1f       	adc	r23, r19
 d48:	84 1f       	adc	r24, r20
 d4a:	48 f4       	brcc	.+18     	; 0xd5e <__addsf3x+0x9c>
 d4c:	87 95       	ror	r24
 d4e:	77 95       	ror	r23
 d50:	67 95       	ror	r22
 d52:	b7 95       	ror	r27
 d54:	f7 95       	ror	r31
 d56:	9e 3f       	cpi	r25, 0xFE	; 254
 d58:	08 f0       	brcs	.+2      	; 0xd5c <__addsf3x+0x9a>
 d5a:	b0 cf       	rjmp	.-160    	; 0xcbc <__addsf3+0x28>
 d5c:	93 95       	inc	r25
 d5e:	88 0f       	add	r24, r24
 d60:	08 f0       	brcs	.+2      	; 0xd64 <__addsf3x+0xa2>
 d62:	99 27       	eor	r25, r25
 d64:	ee 0f       	add	r30, r30
 d66:	97 95       	ror	r25
 d68:	87 95       	ror	r24
 d6a:	08 95       	ret

00000d6c <__fp_mpack>:
 d6c:	9f 3f       	cpi	r25, 0xFF	; 255
 d6e:	31 f0       	breq	.+12     	; 0xd7c <__fp_mpack_finite+0xc>

00000d70 <__fp_mpack_finite>:
 d70:	91 50       	subi	r25, 0x01	; 1
 d72:	20 f4       	brcc	.+8      	; 0xd7c <__fp_mpack_finite+0xc>
 d74:	87 95       	ror	r24
 d76:	77 95       	ror	r23
 d78:	67 95       	ror	r22
 d7a:	b7 95       	ror	r27
 d7c:	88 0f       	add	r24, r24
 d7e:	91 1d       	adc	r25, r1
 d80:	96 95       	lsr	r25
 d82:	87 95       	ror	r24
 d84:	97 f9       	bld	r25, 7
 d86:	08 95       	ret

00000d88 <__divmodhi4>:
 d88:	97 fb       	bst	r25, 7
 d8a:	07 2e       	mov	r0, r23
 d8c:	16 f4       	brtc	.+4      	; 0xd92 <__divmodhi4+0xa>
 d8e:	00 94       	com	r0
 d90:	07 d0       	rcall	.+14     	; 0xda0 <__divmodhi4_neg1>
 d92:	77 fd       	sbrc	r23, 7
 d94:	09 d0       	rcall	.+18     	; 0xda8 <__divmodhi4_neg2>
 d96:	0e 94 de 06 	call	0xdbc	; 0xdbc <__udivmodhi4>
 d9a:	07 fc       	sbrc	r0, 7
 d9c:	05 d0       	rcall	.+10     	; 0xda8 <__divmodhi4_neg2>
 d9e:	3e f4       	brtc	.+14     	; 0xdae <__divmodhi4_exit>

00000da0 <__divmodhi4_neg1>:
 da0:	90 95       	com	r25
 da2:	81 95       	neg	r24
 da4:	9f 4f       	sbci	r25, 0xFF	; 255
 da6:	08 95       	ret

00000da8 <__divmodhi4_neg2>:
 da8:	70 95       	com	r23
 daa:	61 95       	neg	r22
 dac:	7f 4f       	sbci	r23, 0xFF	; 255

00000dae <__divmodhi4_exit>:
 dae:	08 95       	ret

00000db0 <__tablejump2__>:
 db0:	ee 0f       	add	r30, r30
 db2:	ff 1f       	adc	r31, r31
 db4:	05 90       	lpm	r0, Z+
 db6:	f4 91       	lpm	r31, Z
 db8:	e0 2d       	mov	r30, r0
 dba:	09 94       	ijmp

00000dbc <__udivmodhi4>:
 dbc:	aa 1b       	sub	r26, r26
 dbe:	bb 1b       	sub	r27, r27
 dc0:	51 e1       	ldi	r21, 0x11	; 17
 dc2:	07 c0       	rjmp	.+14     	; 0xdd2 <__udivmodhi4_ep>

00000dc4 <__udivmodhi4_loop>:
 dc4:	aa 1f       	adc	r26, r26
 dc6:	bb 1f       	adc	r27, r27
 dc8:	a6 17       	cp	r26, r22
 dca:	b7 07       	cpc	r27, r23
 dcc:	10 f0       	brcs	.+4      	; 0xdd2 <__udivmodhi4_ep>
 dce:	a6 1b       	sub	r26, r22
 dd0:	b7 0b       	sbc	r27, r23

00000dd2 <__udivmodhi4_ep>:
 dd2:	88 1f       	adc	r24, r24
 dd4:	99 1f       	adc	r25, r25
 dd6:	5a 95       	dec	r21
 dd8:	a9 f7       	brne	.-22     	; 0xdc4 <__udivmodhi4_loop>
 dda:	80 95       	com	r24
 ddc:	90 95       	com	r25
 dde:	bc 01       	movw	r22, r24
 de0:	cd 01       	movw	r24, r26
 de2:	08 95       	ret

00000de4 <_exit>:
 de4:	f8 94       	cli

00000de6 <__stop_program>:
 de6:	ff cf       	rjmp	.-2      	; 0xde6 <__stop_program>
