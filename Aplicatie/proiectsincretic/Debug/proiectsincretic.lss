
proiectsincretic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000296  0000032a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000296  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010e  0080010e  00000338  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005af  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000036c  00000000  00000000  00000a17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000488  00000000  00000000  00000d83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  0000120c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000289  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025b  00000000  00000000  000015e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 29 01 	jmp	0x252	; 0x252 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e9       	ldi	r30, 0x96	; 150
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  9e:	0c 94 49 01 	jmp	0x292	; 0x292 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
	;
	/* Get and return received data from buffer */
	return UDR0;
}
  a6:	90 93 c5 00 	sts	0x00C5, r25
  aa:	80 93 c4 00 	sts	0x00C4, r24
  ae:	88 e9       	ldi	r24, 0x98	; 152
  b0:	80 93 c1 00 	sts	0x00C1, r24
  b4:	8e e0       	ldi	r24, 0x0E	; 14
  b6:	80 93 c2 00 	sts	0x00C2, r24
  ba:	24 9a       	sbi	0x04, 4	; 4
  bc:	08 95       	ret

000000be <USART_Transmit>:
  be:	e0 ec       	ldi	r30, 0xC0	; 192
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	90 81       	ld	r25, Z
  c4:	95 ff       	sbrs	r25, 5
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <USART_Transmit+0x4>
  c8:	80 93 c6 00 	sts	0x00C6, r24
  cc:	08 95       	ret

000000ce <sending_string>:

void sending_string(unsigned char* str)
{
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	fc 01       	movw	r30, r24
	int i;
	for ( i = 0; i < 256; i++ )
	{
		if (str[i] == '\0')
  d8:	80 81       	ld	r24, Z
  da:	81 11       	cpse	r24, r1
  dc:	0a c0       	rjmp	.+20     	; 0xf2 <sending_string+0x24>
  de:	10 c0       	rjmp	.+32     	; 0x100 <sending_string+0x32>
  e0:	89 91       	ld	r24, Y+
  e2:	88 23       	and	r24, r24
  e4:	69 f0       	breq	.+26     	; 0x100 <sending_string+0x32>
		{
			break;
		}
		else
		{
			USART_Transmit(str[i]);
  e6:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_Transmit>
}

void sending_string(unsigned char* str)
{
	int i;
	for ( i = 0; i < 256; i++ )
  ea:	c0 17       	cp	r28, r16
  ec:	d1 07       	cpc	r29, r17
  ee:	c1 f7       	brne	.-16     	; 0xe0 <sending_string+0x12>
  f0:	07 c0       	rjmp	.+14     	; 0x100 <sending_string+0x32>
  f2:	8f 01       	movw	r16, r30
		{
			break;
		}
		else
		{
			USART_Transmit(str[i]);
  f4:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_Transmit>
  f8:	e8 01       	movw	r28, r16
  fa:	21 96       	adiw	r28, 0x01	; 1
  fc:	13 95       	inc	r17
  fe:	f0 cf       	rjmp	.-32     	; 0xe0 <sending_string+0x12>
		}
	}
}
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	1f 91       	pop	r17
 106:	0f 91       	pop	r16
 108:	08 95       	ret

0000010a <main>:
#include "timer_interrupt.h"
#include "serial.h"


int main(void)
{	
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	2d 97       	sbiw	r28, 0x0d	; 13
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	f8 94       	cli
 118:	de bf       	out	0x3e, r29	; 62
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	cd bf       	out	0x3d, r28	; 61
	
	PWM_init();
 11e:	0e 94 b4 00 	call	0x168	; 0x168 <PWM_init>
	timer1_init();
 122:	0e 94 02 01 	call	0x204	; 0x204 <timer1_init>
	timer2_init();
 126:	0e 94 14 01 	call	0x228	; 0x228 <timer2_init>
	USART_Init(MYUBRR);
 12a:	87 e6       	ldi	r24, 0x67	; 103
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
	
	unsigned char str[]="Hello World!";
 132:	8d e0       	ldi	r24, 0x0D	; 13
 134:	e0 e0       	ldi	r30, 0x00	; 0
 136:	f1 e0       	ldi	r31, 0x01	; 1
 138:	de 01       	movw	r26, r28
 13a:	11 96       	adiw	r26, 0x01	; 1
 13c:	01 90       	ld	r0, Z+
 13e:	0d 92       	st	X+, r0
 140:	8a 95       	dec	r24
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0x32>
	int once=0;
	
	sei();
 144:	78 94       	sei
	timer1_init();
	timer2_init();
	USART_Init(MYUBRR);
	
	unsigned char str[]="Hello World!";
	int once=0;
 146:	00 e0       	ldi	r16, 0x00	; 0
 148:	10 e0       	ldi	r17, 0x00	; 0
    {
		PWM_fadein_fadeout();
		if(once==0)
		{
			sending_string(str);
			once=1;
 14a:	ee 24       	eor	r14, r14
 14c:	e3 94       	inc	r14
 14e:	f1 2c       	mov	r15, r1
	sei();
    
	/* Replace with your application code */
    while (1) 
    {
		PWM_fadein_fadeout();
 150:	0e 94 bc 00 	call	0x178	; 0x178 <PWM_fadein_fadeout>
		if(once==0)
 154:	01 15       	cp	r16, r1
 156:	11 05       	cpc	r17, r1
 158:	d9 f7       	brne	.-10     	; 0x150 <main+0x46>
		{
			sending_string(str);
 15a:	ce 01       	movw	r24, r28
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	0e 94 67 00 	call	0xce	; 0xce <sending_string>
			once=1;
 162:	0e 2d       	mov	r16, r14
 164:	1f 2d       	mov	r17, r15
 166:	f4 cf       	rjmp	.-24     	; 0x150 <main+0x46>

00000168 <PWM_init>:


void PWM_init()
{
	//Fast PWM mode, clear on compare match
	TCCR0A|=(1<<COM0A1)|(1<<WGM01)|(1<<WGM00);
 168:	84 b5       	in	r24, 0x24	; 36
 16a:	83 68       	ori	r24, 0x83	; 131
 16c:	84 bd       	out	0x24, r24	; 36
	TCCR0B|=(1<<CS00);	//no prescaler
 16e:	85 b5       	in	r24, 0x25	; 37
 170:	81 60       	ori	r24, 0x01	; 1
 172:	85 bd       	out	0x25, r24	; 37
	//PWM pin
	DDRD|=(1<<PIND6);
 174:	56 9a       	sbi	0x0a, 6	; 10
 176:	08 95       	ret

00000178 <PWM_fadein_fadeout>:
}

void PWM_fadein_fadeout()
{
	
	for(i=0;i<=255;i++)
 178:	10 92 11 01 	sts	0x0111, r1
 17c:	10 92 10 01 	sts	0x0110, r1
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
	{
		OCR0A=i;
 184:	87 bd       	out	0x27, r24	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	8f e7       	ldi	r24, 0x7F	; 127
 188:	9e e3       	ldi	r25, 0x3E	; 62
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <PWM_fadein_fadeout+0x12>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <PWM_fadein_fadeout+0x18>
 190:	00 00       	nop
}

void PWM_fadein_fadeout()
{
	
	for(i=0;i<=255;i++)
 192:	80 91 10 01 	lds	r24, 0x0110
 196:	90 91 11 01 	lds	r25, 0x0111
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	90 93 11 01 	sts	0x0111, r25
 1a0:	80 93 10 01 	sts	0x0110, r24
 1a4:	8f 3f       	cpi	r24, 0xFF	; 255
 1a6:	91 05       	cpc	r25, r1
 1a8:	69 f3       	breq	.-38     	; 0x184 <PWM_fadein_fadeout+0xc>
 1aa:	64 f3       	brlt	.-40     	; 0x184 <PWM_fadein_fadeout+0xc>
 1ac:	9f ef       	ldi	r25, 0xFF	; 255
 1ae:	23 ed       	ldi	r18, 0xD3	; 211
 1b0:	80 e3       	ldi	r24, 0x30	; 48
 1b2:	91 50       	subi	r25, 0x01	; 1
 1b4:	20 40       	sbci	r18, 0x00	; 0
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <PWM_fadein_fadeout+0x3a>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <PWM_fadein_fadeout+0x44>
 1bc:	00 00       	nop
	{
		OCR0A=i;
		_delay_ms(4);
	}
	_delay_ms(1000);
	for(i=255;i>=0;i--)
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	90 93 11 01 	sts	0x0111, r25
 1c6:	80 93 10 01 	sts	0x0110, r24
	{
		OCR0A=i;
 1ca:	87 bd       	out	0x27, r24	; 39
 1cc:	8f e7       	ldi	r24, 0x7F	; 127
 1ce:	9e e3       	ldi	r25, 0x3E	; 62
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <PWM_fadein_fadeout+0x58>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <PWM_fadein_fadeout+0x5e>
 1d6:	00 00       	nop
	{
		OCR0A=i;
		_delay_ms(4);
	}
	_delay_ms(1000);
	for(i=255;i>=0;i--)
 1d8:	80 91 10 01 	lds	r24, 0x0110
 1dc:	90 91 11 01 	lds	r25, 0x0111
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	90 93 11 01 	sts	0x0111, r25
 1e6:	80 93 10 01 	sts	0x0110, r24
 1ea:	99 23       	and	r25, r25
 1ec:	74 f7       	brge	.-36     	; 0x1ca <PWM_fadein_fadeout+0x52>
	{
		OCR0A=i;
		_delay_ms(4);
	}
	OCR0A=0;
 1ee:	17 bc       	out	0x27, r1	; 39
 1f0:	9f ef       	ldi	r25, 0xFF	; 255
 1f2:	23 ed       	ldi	r18, 0xD3	; 211
 1f4:	80 e3       	ldi	r24, 0x30	; 48
 1f6:	91 50       	subi	r25, 0x01	; 1
 1f8:	20 40       	sbci	r18, 0x00	; 0
 1fa:	80 40       	sbci	r24, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <PWM_fadein_fadeout+0x7e>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <PWM_fadein_fadeout+0x88>
 200:	00 00       	nop
 202:	08 95       	ret

00000204 <timer1_init>:

void timer1_init()
{
	//TIMER 1 (16 bit)    -    normal mode
	//prescaler 1024
	TCCR1B |=(1<<CS12)|(1<<CS10)|(1<<WGM12);
 204:	e1 e8       	ldi	r30, 0x81	; 129
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	8d 60       	ori	r24, 0x0D	; 13
 20c:	80 83       	st	Z, r24
	//enabling output compare match A
	TIMSK1 |= (1<<OCIE1A);
 20e:	ef e6       	ldi	r30, 0x6F	; 111
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	82 60       	ori	r24, 0x02	; 2
 216:	80 83       	st	Z, r24
	//setting the output compare register A
	OCR1A = 15625;
 218:	89 e0       	ldi	r24, 0x09	; 9
 21a:	9d e3       	ldi	r25, 0x3D	; 61
 21c:	90 93 89 00 	sts	0x0089, r25
 220:	80 93 88 00 	sts	0x0088, r24
	
	//setting PIND7 as output - LED
	DDRD|=(1<<PIND7);
 224:	57 9a       	sbi	0x0a, 7	; 10
 226:	08 95       	ret

00000228 <timer2_init>:


void timer2_init()
{
	//TCNT2 = 3036;
	TCCR2B|=(1<<CS22)|(1<<CS21)|(1<<CS20); //1024 prescaler
 228:	e1 eb       	ldi	r30, 0xB1	; 177
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	87 60       	ori	r24, 0x07	; 7
 230:	80 83       	st	Z, r24
	//enabling overflow interrupt
	TIMSK2|=(1<<TOIE2);
 232:	e0 e7       	ldi	r30, 0x70	; 112
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	81 60       	ori	r24, 0x01	; 1
 23a:	80 83       	st	Z, r24
 23c:	08 95       	ret

0000023e <__vector_11>:




ISR(TIMER1_COMPA_vect)
{
 23e:	1f 92       	push	r1
 240:	0f 92       	push	r0
 242:	0f b6       	in	r0, 0x3f	; 63
 244:	0f 92       	push	r0
 246:	11 24       	eor	r1, r1
	//PORTD ^= ( 1 << PIND7 );
}
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <__vector_9>:


ISR	(TIMER2_OVF_vect)
{
 252:	1f 92       	push	r1
 254:	0f 92       	push	r0
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	0f 92       	push	r0
 25a:	11 24       	eor	r1, r1
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
	t++;
 260:	80 91 0e 01 	lds	r24, 0x010E
 264:	90 91 0f 01 	lds	r25, 0x010F
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	90 93 0f 01 	sts	0x010F, r25
 26e:	80 93 0e 01 	sts	0x010E, r24
	if(t==61)
 272:	cd 97       	sbiw	r24, 0x3d	; 61
 274:	39 f4       	brne	.+14     	; 0x284 <__vector_9+0x32>
	{
		PORTD ^= ( 1 << PIND7 );
 276:	8b b1       	in	r24, 0x0b	; 11
 278:	80 58       	subi	r24, 0x80	; 128
 27a:	8b b9       	out	0x0b, r24	; 11
		t=0;
 27c:	10 92 0f 01 	sts	0x010F, r1
 280:	10 92 0e 01 	sts	0x010E, r1
	}
}
 284:	9f 91       	pop	r25
 286:	8f 91       	pop	r24
 288:	0f 90       	pop	r0
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	0f 90       	pop	r0
 28e:	1f 90       	pop	r1
 290:	18 95       	reti

00000292 <_exit>:
 292:	f8 94       	cli

00000294 <__stop_program>:
 294:	ff cf       	rjmp	.-2      	; 0x294 <__stop_program>
